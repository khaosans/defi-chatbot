This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-20T03:25:40.482Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.mvn/
  wrapper/
    maven-wrapper.properties
    MavenWrapperDownloader.java
src/
  main/
    frontend/
      components/
        ChatHistory.tsx
        CustomButton.tsx
        Header.tsx
        Message.tsx
        MessageList.tsx
        Pagination.tsx
      themes/
        customer-support-agent/
          styles.css
          theme.json
      views/
        @index.tsx
        ChatComponentView.test.tsx
        ChatComponentView.tsx
        ChatHistoryView.tsx
        DeFiDashboardView.tsx
        FlightManagementDashboardView.tsx
        FlightView.tsx
        Logout.tsx
        MainLayout.tsx
      App.tsx
      index.html
      theme.js
    java/
      org/
        vaadin/
          marcus/
            client/
              AssistantService.java
              BookingService.java
              package-info.java
              PortfolioService.java
            config/
              CoinbaseConfig.java
              OptionalTypeAdapter.java
              SecurityConfig.java
              WebConfig.java
            controller/
              LoginController.java
            data/
              Booking.java
              BookingClass.java
              BookingData.java
              BookingStatus.java
              Customer.java
              package-info.java
            frontend/
              views/
                DeFiBalancesView.java
            langchain4j/
              Coinbase4jTools.java
              LangChain4jAssistant.java
              LangChain4jConfig.java
              LangChain4jTools.java
              RouteUtil.java
            model/
              DeFiBalance.java
              TokenBalance.java
            service/
              AccountDetails.java
              BookingDetails.java
              CoinbaseService.java
              DeBankMockService.java
              DeFiAccountService.java
              FlightService.java
              MockTradingExecutionService.java
              PortfolioManagementService.java
              SwingTradingStrategy.java
              UserService.java
            views/
              LoginView.java
              LogoutView.java
            Application.java
            AppShellConfig.java
    resources/
      META-INF/
        additional-spring-configuration-metadata.json
      banner.txt
      terms-of-service.txt
  test/
    resources/
      features/
        execute_trade_based_on_strategy.feature
        generate_swing_trading_strategy.feature
        view_defi_account_balances.feature
        view_portfolio_insights.feature
supabase/
  .gitignore
  config.toml
.cursorignore
.gitignore
build_and_start.sh
LICENSE
mvnw
mvnw.cmd
output.txt
package.json
pom.xml
README.md
tsconfig.json
types.d.ts
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar

================
File: .mvn/wrapper/MavenWrapperDownloader.java
================
/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.io.*;
import java.net.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is
     * provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
            + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl
     * property to use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH = ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH = ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download
     * url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a
        // custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if (mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if (mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if (!outputFile.getParentFile().exists()) {
            if (!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

================
File: src/main/frontend/components/ChatHistory.tsx
================
import React from 'react';

interface ChatSession {
  id: string;
  title: string;
}

interface ChatHistoryProps {
  sessions: ChatSession[];
  onSelectSession: (id: string) => void;
}

const ChatHistory: React.FC<ChatHistoryProps> = ({ sessions, onSelectSession }) => {
  return (
    <div className="chat-history">
      <h2>Chat History</h2>
      <ul>
        {sessions.map((session) => (
          <li
            key={session.id}
            onClick={() => onSelectSession(session.id)}
          >
            {session.title}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ChatHistory;

================
File: src/main/frontend/components/CustomButton.tsx
================
import React from 'react';
import { Button } from "@vaadin/react-components/Button";

interface CustomButtonProps {
  onClick?: () => void;
  className?: string;
  children: React.ReactNode;
  disabled?: boolean;
}

const CustomButton: React.FC<CustomButtonProps> = ({ onClick, className, children, disabled }) => {
  return (
    <Button
      onClick={onClick}
      className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded ${className}`}
      disabled={disabled}
    >
      {children}
    </Button>
  );
};

export default CustomButton;

================
File: src/main/frontend/components/Header.tsx
================
import React, { ReactNode } from 'react';
import { useNavigate } from 'react-router-dom';
import "Frontend/themes/customer-support-agent/styles.css";

interface HeaderProps {
  children?: ReactNode;
}

const Header: React.FC<HeaderProps> = ({ children }) => {
    const navigate = useNavigate();

    const handleLogout = async () => {
        const userSessionId = localStorage.getItem('sessionId');
        if (userSessionId) {
            try {
                await fetch(`/api/logout/${userSessionId}`, { method: 'POST' });
                localStorage.removeItem('sessionId');
                navigate('/logout');
            } catch (error) {
                console.error("Logout failed:", error);
            }
        }
    };

    const toggleTheme = () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
    };

    return (
        <header className="header-container">
            <h1 className="header-title">SourBot</h1>
            <div>
                <button className="theme-toggle-button" onClick={toggleTheme}>
                    {document.documentElement.getAttribute('data-theme') === 'dark' ? '☀️' : '🌙'}
                </button>
                <button className="logout-button" onClick={handleLogout}>Logout</button>
            </div>
        </header>
    );
};

export default Header;

================
File: src/main/frontend/components/Message.tsx
================
import Markdown from "react-markdown";

export interface MessageItem {
  role: 'user' | 'assistant';
  content: string;
}

interface MessageProps {
  message: MessageItem;
}

export default function Message({message}: MessageProps) {
  return (
    <div className="mb-l">
      <div className="font-bold">{message.role === 'user' ? '🧑‍💻 You' : '🤖 Assistant'}</div>
      <div>
        <Markdown>
          {message.content}
        </Markdown>
      </div>
    </div>
  )
};

================
File: src/main/frontend/components/MessageList.tsx
================
import React, { useRef, useEffect } from 'react';
import Message, {MessageItem} from './Message';

interface MessageListProps {
  messages: MessageItem[];
  className?: string;
}

export default function MessageList({ messages, className }: MessageListProps) {
  const endOfMessagesRef = useRef<HTMLDivElement>(null);

  // Automatically scroll down whenever the messages change
  useEffect(() => {
    if (endOfMessagesRef.current) {
      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  return (
    <div className={className}>
      {messages.map((msg, index) => (
        <Message key={index} message={msg} />
      ))}
      <div ref={endOfMessagesRef} />
    </div>
  );
}

================
File: src/main/frontend/components/Pagination.tsx
================
import React from 'react';
import CustomButton from './CustomButton';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {
  return (
    <div className="flex justify-center items-center mt-4 space-x-2">
      <CustomButton
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="px-2 py-1 text-sm"
      >
        Previous
      </CustomButton>
      <span className="text-gray-700">
        Page {currentPage} of {totalPages}
      </span>
      <CustomButton
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="px-2 py-1 text-sm"
      >
        Next
      </CustomButton>
    </div>
  );
};

export default Pagination;

================
File: src/main/frontend/themes/customer-support-agent/styles.css
================
/* Add custom styles for the Index component */
.index-container {
  display: flex;
  height: 100vh;
  overflow: hidden;
}

.index-header {
  padding: 1rem;
  background-color: var(--header-background-color);
  border-bottom: 1px solid var(--border-color); /* Slightly lighter brown for border */
  color: var(--header-text-color);
}

.index-message-list {
  flex-grow: 1;
  overflow-y: auto;
  padding: 1rem;
  background-color: var(--background-color);
  border-radius: 0.5rem;
  box-shadow: 0 0.125rem 0.25rem rgba(233, 223, 223, 0.075);
  color: var(--text-color); /* Black text color for messages */
}

.index-message-input {
  padding: 1rem;
  background-color: var(--input-background-color);
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
  border-top: 1px solid var(--border-color); /* Slightly lighter brown for border */
  color: var(--input-text-color); /* Black text color for input */
  font-family: var(--lumo-font-family); /* Ensure consistent font */
}

.index-message-input input {
  color: var(--input-text-color); /* Black text color for input field */
  background-color: var(--input-background-color); /* Lighter brown for input field */
}

/* Add custom styles for the Header component */
.header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  background-color: var(--header-background-color);
  color: var(--header-text-color);
  border-bottom: 1px solid var(--border-color); /* Slightly lighter brown for border */
  border-radius: 0.5rem;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

.header-title {
  margin: 0;
  font-size: 1.5rem;
  font-weight: bold;
  color: var(--header-text-color); /* Black text color */
}

.logout-button {
  padding: 0.5rem 1rem;
  background-color: var(--button-background-color); /* Red for logout button */
  color: var(--button-text-color); /* White text color */
  border: none;
  border-radius: 0.25rem;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.3s ease;
}

.logout-button:hover {
  background-color: var(--button-hover-background-color); /* Darker red on hover */
}

:root {
  --background-color: #f5f5f5;
  --text-color: #333333;
  --header-background-color: #ffffff;
  --header-text-color: #333333;
  --input-background-color: #ffffff;
  --input-text-color: #333333;
  --button-background-color: #4a90e2;
  --button-text-color: #ffffff;
  --button-hover-background-color: #3a7bc8;
  --message-user-background: #e1f5fe;
  --message-bot-background: #f0f0f0;
  --border-color: #e0e0e0;
}

[data-theme="dark"] {
  --background-color: #1e1e1e;
  --text-color: #ffffff; /* White text color for better contrast */
  --header-background-color: #2d2d2d;
  --header-text-color: #ffffff;
  --input-background-color: #3d3d3d;
  --input-text-color: #ffffff;
  --button-background-color: #4a90e2;
  --button-text-color: #ffffff;
  --button-hover-background-color: #3a7bc8;
  --message-user-background: #2b5278;
  --message-bot-background: #3d3d3d;
  --border-color: #4d4d4d;
  --chat-history-hover: #4a4a4a; /* New color for chat history hover in dark mode */
  --chat-history-title-color: #ffffff; /* White color for chat history title */
}

body {
  background-color: var(--background-color);
  color: var(--text-color);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
  line-height: 1.6;
}

.theme-toggle-button {
  padding: 0.5rem 1rem;
  background-color: var(--button-background-color);
  color: var(--button-text-color);
  border: none;
  border-radius: 0.25rem;
  cursor: pointer;
  margin-left: 1rem;
  font-size: 0.9rem;
  transition: background-color 0.3s ease;
}

.theme-toggle-button:hover {
  background-color: var(--button-hover-background-color);
}

.theme-toggle-button {
  margin-right: 0.5rem;
}

vaadin-text-area {
  --lumo-text-field-background-color: var(--input-background-color);
  --lumo-text-color: var(--input-text-color);
  --lumo-primary-color: var(--button-background-color);
}

.chat-history {
  padding: 1rem;
}

.chat-history h2 {
  margin-bottom: 1rem;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--text-color); /* Use theme text color for chat history title */
}

.chat-history ul {
  list-style-type: none;
  padding: 0;
}

.chat-history li {
  padding: 0.5rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  transition: background-color 0.2s ease;
  color: var(--text-color); /* Ensure chat history text uses the theme text color */
}

.chat-history li:hover {
  background-color: var(--chat-history-hover);
}

/* Adjust Header component styles */
.header-container {
  padding: 0.75rem 1rem;
  background-color: var(--header-background-color);
  border-bottom: 1px solid var(--border-color);
  color: var(--header-text-color);
}

/* Adjust MessageInput component styles */
vaadin-message-input {
  --vaadin-message-input-text-area-width: 100%;
  --vaadin-message-input-text-area-height: 60px;
}

.sidebar {
  width: 250px;
  background-color: var(--background-color);
  border-right: 1px solid var(--border-color);
  overflow-y: auto;
}

.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.message-container {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  background-color: var(--background-color);
  color: var(--text-color);
}

.input-container {
  padding: 1rem;
  background-color: var(--input-background-color);
  border-top: 1px solid var(--border-color);
}

vaadin-message-input::part(input-field) {
  color: var(--input-text-color);
}

/* Ensure input text is visible in dark mode */
[data-theme="dark"] vaadin-message-input::part(input-field) {
  color: var(--input-text-color);
  background-color: var(--input-background-color);
}

/* Ensure message list text is visible in dark mode */
[data-theme="dark"] .message-container {
  color: var(--text-color);
}

/* Add more contrast to the sidebar in dark mode */
[data-theme="dark"] .sidebar {
  background-color: #252525;
}

/* Ensure chat history text is visible in dark mode */
[data-theme="dark"] .chat-history li {
  color: var(--text-color);
}

/* Adjust input placeholder color for better visibility in dark mode */
[data-theme="dark"] vaadin-message-input::part(input-field)::placeholder {
  color: #a0a0a0;
}

================
File: src/main/frontend/themes/customer-support-agent/theme.json
================
{
  "lumoImports" : [ "typography", "color", "spacing", "badge", "utility" ]
}

================
File: src/main/frontend/views/@index.tsx
================
import { useEffect, useState } from "react";
import { BookingService, PortfolioService, AssistantService } from "Frontend/generated/endpoints";
import BookingDetails from "Frontend/generated/org/vaadin/marcus/service/BookingDetails";
import AccountDetails from "Frontend/generated/org/vaadin/marcus/service/AccountDetails";
import { MessageInput } from "@vaadin/react-components/MessageInput";
import { nanoid } from "nanoid";
import { MessageItem } from "../components/Message";
import MessageList from "Frontend/components/MessageList";
import "Frontend/themes/customer-support-agent/styles.css";
import Header from "Frontend/components/Header";
import ChatHistory from "Frontend/components/ChatHistory";

// Remove AssistantService from the component logic
// Replace it with a mock function for now
const mockAssistantService = {
  chat: (chatId: string, message: string) => ({
    onNext: (callback: (token: string) => void) => {
      callback("This is a mock response.");
      return { onError: (p0: () => void) => {}, onComplete: () => {} };
    },
  }),
};

export default function Index() {
  const [chatId] = useState(nanoid());
  const [working, setWorking] = useState(false);
  const [accounts, setAccounts] = useState<AccountDetails[]>([]);
  const [bookings, setBookings] = useState<BookingDetails[]>([]);
  const [messages, setMessages] = useState<MessageItem[]>([{
    role: 'assistant',
    content: 'Welcome to Funnair! How can I help you?'
  }]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [chatSessions, setChatSessions] = useState<{ id: string; title: string }[]>([
    { id: chatId, title: "Current Chat" },
  ]);
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    setIsLoading(true);
    setError(null);
    Promise.all([
      BookingService.getBookings(),
      PortfolioService.getAccounts()
    ])
      .then(([bookingsData, accountsData]) => {
        setBookings(bookingsData);
        setAccounts(accountsData);
      })
      .catch((err: Error) => setError("Failed to load data. Please try again."))
      .finally(() => setIsLoading(false));
  }, []);

  const addMessage = (message: MessageItem) => {
    setMessages(messages => [...messages, message]);
  };

  const appendToLatestMessage = (chunk: string) => {
    setMessages(messages => {
      const latestMessage = messages[messages.length - 1];
      latestMessage.content += chunk;
      return [...messages.slice(0, -1), latestMessage];
    });
  };

  const sendMessage = async (message: string) => {
    setWorking(true);
    addMessage({ role: 'user', content: message });
    let first = true;
    AssistantService.chat(chatId, message)
      .onNext((token: string) => {
        if (first && token) {
          addMessage({ role: 'assistant', content: token });
          first = false;
        } else {
          appendToLatestMessage(token);
        }
      })
      .onError(() => {
        setError("Failed to send message. Please try again.");
        setWorking(false);
      })
   
  };

  const handleSelectSession = (id: string) => {
    // TODO: Implement session switching logic
    console.log(`Switching to session ${id}`);
  };

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    document.body.setAttribute('data-theme', newTheme);
  };

  // Apply theme on component mount
  useEffect(() => {
    document.body.setAttribute('data-theme', theme);
  }, []);

  if (isLoading) {
    return <div className="flex justify-center items-center h-full">Loading...</div>;
  }

  if (error) {
    return <div className="flex justify-center items-center h-full text-red-500">{error}</div>;
  }

  return (
    <div className="index-container">
      <div className="sidebar">
        <ChatHistory sessions={chatSessions} onSelectSession={handleSelectSession} />
      </div>
      <div className="main-content">
        <Header>
          <button onClick={toggleTheme} className="theme-toggle-button">
            {theme === 'light' ? 'Dark Mode' : 'Light Mode'}
          </button>
        </Header>
        <div className="message-container">
          <MessageList messages={messages} />
        </div>
        <div className="input-container">
          <MessageInput 
            onSubmit={e => sendMessage(e.detail.value)} 
            disabled={working}
          />
        </div>
      </div>
    </div>
  );
}

================
File: src/main/frontend/views/ChatComponentView.test.tsx
================


================
File: src/main/frontend/views/ChatComponentView.tsx
================
import React from 'react';

const ChatComponent: React.FC = () => {
    return (
        <div>
            <h2>Chat Component</h2>
            {/* Chat component content goes here */}
        </div>
    );
};

export default ChatComponent;

================
File: src/main/frontend/views/ChatHistoryView.tsx
================
import React from 'react';

const ChatHistory: React.FC = () => {
    return (
        <div>
            <h2>Chat History</h2>
            {/* Chat history content goes here */}
        </div>
    );
};

export default ChatHistory;

================
File: src/main/frontend/views/DeFiDashboardView.tsx
================
import React, { useState, useEffect } from 'react';
import { getBalancesByChain, getTotalPortfolioValue, getTokenPrice, generatePortfolioInsights } from 'Frontend/generated/DeBankMockService';
import { Grid } from '@vaadin/react-components/Grid';
import { GridColumn } from '@vaadin/react-components/GridColumn';
import { Button } from '@vaadin/react-components/Button';
import { Select } from '@vaadin/react-components/Select';
import { Details } from '@vaadin/react-components/Details';

interface TokenBalance {
  token: string;
  balance: number;
}

export default function DeFiDashboardView() {
  const [balances, setBalances] = useState<TokenBalance[]>([]);
  const [totalValue, setTotalValue] = useState<number>(0);
  const [selectedChain, setSelectedChain] = useState<string>('ethereum');
  const [error, setError] = useState<string | null>(null);
  const [insights, setInsights] = useState<string[]>([]);

  const chains = ['ethereum', 'bsc', 'polygon'];

  const fetchData = async () => {
    try {
      const [balancesData, totalValueData, insightsData] = await Promise.all([
        getBalancesByChain(selectedChain),
        getTotalPortfolioValue(),
        generatePortfolioInsights(),
      ]);
      setBalances(balancesData);
      setTotalValue(totalValueData);
      setInsights(insightsData);
      setError(null);
    } catch (err) {
      setError('Failed to fetch DeFi account data. Please try again.');
    }
  };

  useEffect(() => {
    fetchData();
  }, [selectedChain]);

  const handleChainChange = (event: CustomEvent) => {
    setSelectedChain(event.detail.value);
  };

  return (
    <div>
      <h2>DeFi Portfolio Dashboard</h2>
      {error && <div className="error">{error}</div>}
      <Button onClick={fetchData}>Refresh Data</Button>
      <Select
        label="Select Chain"
        value={selectedChain}
        onChange={handleChainChange}
        items={chains.map(chain => ({ label: chain.toUpperCase(), value: chain }))}
      />
      <Grid items={balances}>
        <GridColumn path="token" header="Token" />
        <GridColumn path="balance" header="Balance" />
        <GridColumn header="USD Value" renderer={({ item }) => {
          const usdValue = item.balance * getTokenPrice(item.token);
          return `$${usdValue.toFixed(2)}`;
        }} />
      </Grid>
      <div>Total Portfolio Value: ${totalValue.toFixed(2)}</div>
      <Details summary="Portfolio Insights">
        <ul>
          {insights.map((insight, index) => (
            <li key={index}>{insight}</li>
          ))}
        </ul>
      </Details>
    </div>
  );
}

================
File: src/main/frontend/views/FlightManagementDashboardView.tsx
================
import { useState } from "react";
import { GridColumn } from "@vaadin/react-components/GridColumn";
import { Grid } from "@vaadin/react-components/Grid";
import CustomButton from "../components/CustomButton";
import BookingDetails from "Frontend/generated/org/vaadin/marcus/service/BookingDetails";

const statusIcons: { [key: string]: string } = {
  CONFIRMED: "✅",
  COMPLETED: "🏁",
  CANCELLED: "❌",
  AWAITING_CONFIRMATION: "⏳",
  AVAILABLE: "🟢"
};

interface FlightManagementDashboardProps {
  bookings: BookingDetails[];
}

const FlightManagementDashboard: React.FC<FlightManagementDashboardProps> = ({ bookings }) => {
  const [showConfirmed, setShowConfirmed] = useState(false);

  const renderStatus = (booking: BookingDetails) => {
    const status = booking.bookingStatus;
    return statusIcons[status as keyof typeof statusIcons] || status;
  };

  const awaitingConfirmationBookings = bookings.filter(booking => booking.bookingStatus === "AWAITING_CONFIRMATION");
  const availableFlights = bookings.filter(booking => booking.bookingStatus === "AVAILABLE");
  const confirmedBookings = bookings.filter(booking => booking.bookingStatus === "CONFIRMED");

  const renderBookingGrid = (items: BookingDetails[], showNames: boolean = true) => (
    <Grid items={items} className="flex-shrink-0">
      <GridColumn path="bookingNumber" header="#" autoWidth/>
      {showNames && (
        <>
          <GridColumn path="firstName" autoWidth/>
          <GridColumn path="lastName" autoWidth/>
        </>
      )}
      <GridColumn path="date" autoWidth/>
      <GridColumn path="from" autoWidth/>
      <GridColumn path="to" autoWidth/>
      <GridColumn header="Status" autoWidth>
        {({ item }) => renderStatus(item)}
      </GridColumn>
      <GridColumn path="bookingClass" autoWidth/>
    </Grid>
  );

  return (
    <div className="flex flex-col gap-6 p-6 box-border overflow-auto w-full md:w-3/4 bg-gray-50">
      <h2 className="text-3xl font-bold text-blue-700 border-b-2 border-blue-300 pb-2">Flight Management Dashboard</h2>
      <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
        <h3 className="text-xl font-semibold mb-3 text-blue-600">Bookings Awaiting Confirmation</h3>
        {renderBookingGrid(awaitingConfirmationBookings)}
      </section>
      <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
        <h3 className="text-xl font-semibold mb-3 text-blue-600">Available Flight Options</h3>
        {renderBookingGrid(availableFlights, false)}
      </section>
      <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
        <h3 className="text-xl font-semibold mb-3 text-blue-600">Confirmed Bookings</h3>
        <CustomButton onClick={() => setShowConfirmed(!showConfirmed)} className="mb-3">
          {showConfirmed ? 'Hide' : 'Show'} Confirmed Bookings ({confirmedBookings.length})
        </CustomButton>
        {showConfirmed && (
          confirmedBookings.length > 0 
            ? renderBookingGrid(confirmedBookings)
            : <p className="text-gray-600 italic">No confirmed bookings available at this time.</p>
        )}
      </section>
    </div>
  );
};

export default FlightManagementDashboard;

================
File: src/main/frontend/views/FlightView.tsx
================
import { useState } from "react";
import { GridColumn } from "@vaadin/react-components/GridColumn";
import { Grid } from "@vaadin/react-components/Grid";
import CustomButton from "../components/CustomButton";
import BookingDetails from "Frontend/generated/org/vaadin/marcus/service/BookingDetails";

const statusIcons: { [key: string]: string } = {
  CONFIRMED: "✅",
  COMPLETED: "🏁",
  CANCELLED: "❌",
  AWAITING_CONFIRMATION: "⏳",
  AVAILABLE: "🟢"
};

interface FlightManagementDashboardProps {
  bookings: BookingDetails[];
}

const FlightManagementDashboard: React.FC<FlightManagementDashboardProps> = ({ bookings }) => {
  const [showConfirmed, setShowConfirmed] = useState(false);

  const renderStatus = (booking: BookingDetails) => {
    const status = booking.bookingStatus;
    return statusIcons[status as keyof typeof statusIcons] || status;
  };

  const awaitingConfirmationBookings = bookings.filter(booking => booking.bookingStatus === "AWAITING_CONFIRMATION");
  const availableFlights = bookings.filter(booking => booking.bookingStatus === "AVAILABLE");
  const confirmedBookings = bookings.filter(booking => booking.bookingStatus === "CONFIRMED");

  const renderBookingGrid = (items: BookingDetails[], showNames: boolean = true) => (
    <Grid items={items} className="flex-shrink-0">
      <GridColumn path="bookingNumber" header="#" autoWidth/>
      {showNames && (
        <>
          <GridColumn path="firstName" autoWidth/>
          <GridColumn path="lastName" autoWidth/>
        </>
      )}
      <GridColumn path="date" autoWidth/>
      <GridColumn path="from" autoWidth/>
      <GridColumn path="to" autoWidth/>
      <GridColumn header="Status" autoWidth>
        {({ item }) => renderStatus(item)}
      </GridColumn>
      <GridColumn path="bookingClass" autoWidth/>
    </Grid>
  );

  return (
    <div className="flex flex-col gap-6 p-6 box-border overflow-auto w-full md:w-3/4 bg-gray-50">
      <h2 className="text-3xl font-bold text-blue-700 border-b-2 border-blue-300 pb-2">Flight Management Dashboard</h2>
      <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
        <h3 className="text-xl font-semibold mb-3 text-blue-600">Bookings Awaiting Confirmation</h3>
        {renderBookingGrid(awaitingConfirmationBookings)}
      </section>
      <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
        <h3 className="text-xl font-semibold mb-3 text-blue-600">Available Flight Options</h3>
        {renderBookingGrid(availableFlights, false)}
      </section>
      <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
        <h3 className="text-xl font-semibold mb-3 text-blue-600">Confirmed Bookings</h3>
        <CustomButton onClick={() => setShowConfirmed(!showConfirmed)} className="mb-3">
          {showConfirmed ? 'Hide' : 'Show'} Confirmed Bookings ({confirmedBookings.length})
        </CustomButton>
        {showConfirmed && (
          confirmedBookings.length > 0 
            ? renderBookingGrid(confirmedBookings)
            : <p className="text-gray-600 italic">No confirmed bookings available at this time.</p>
        )}
      </section>
    </div>
  );
};

export default FlightManagementDashboard;

================
File: src/main/frontend/views/Logout.tsx
================
import React from 'react';

const Logout: React.FC = () => {
    return (
        <div>
            <h2>Logout Component</h2>
            {/* Logout component content goes here */}
        </div>
    );
};

export default Logout;

================
File: src/main/frontend/views/MainLayout.tsx
================
import React from 'react';
import { AppLayout } from '@vaadin/react-components/AppLayout';
import { DrawerToggle } from '@vaadin/react-components/DrawerToggle';
import { NavLink } from 'react-router-dom';

export default function MainLayout() {
  return (
    <AppLayout primarySection="drawer">
      <DrawerToggle slot="navbar" />
      <h1 slot="navbar">SourBot DeFi Portfolio Manager</h1>
      <div slot="drawer">
        <NavLink to="/">Home</NavLink>
        <NavLink to="/defi-dashboard">DeFi Dashboard</NavLink>
        {/* Add other navigation links as needed */}
      </div>
      <div>
        {/* Router outlet will be rendered here */}
      </div>
    </AppLayout>
  );
}

================
File: src/main/frontend/App.tsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import MainLayout from './views/MainLayout';
import Logout from './views/Logout'; // Ensure this path is correct

const App: React.FC = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<MainLayout />} />
        <Route path="/logout" element={<Logout />} /> {/* Define the logout route */}
      </Routes>
    </Router>
  );
};

export default App;

================
File: src/main/frontend/index.html
================
<!DOCTYPE html>
<!--
This file is auto-generated by Vaadin.
-->

<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="path/to/your/favicon.ico" type="image/x-icon" />
  <style>
    body, #outlet {
      height: 100vh;
      width: 100%;
      margin: 0;
    }
  </style>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <!-- This outlet div is where the views are rendered -->
  <div id="outlet"></div>
</body>
</html>

================
File: src/main/frontend/theme.js
================
export function applyTheme(document) {
    // Your theme application logic here
}

================
File: src/main/java/org/vaadin/marcus/client/AssistantService.java
================
package org.vaadin.marcus.client;

import org.vaadin.marcus.langchain4j.LangChain4jAssistant;

import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Sinks;

@BrowserCallable
@AnonymousAllowed
public class AssistantService {

    private final LangChain4jAssistant langChain4JAssistant;

    public AssistantService(LangChain4jAssistant langChain4JAssistant) {
        this.langChain4JAssistant = langChain4JAssistant;
    }

    public Flux<String> chat(String chatId, String userMessage) {
        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();
        langChain4JAssistant.chat(chatId, userMessage)
                .onNext(sink::tryEmitNext)
                .onComplete(aiMessageResponse -> sink.tryEmitComplete())
                .onError(sink::tryEmitError)
                .start();

        return sink.asFlux();
    }
}

================
File: src/main/java/org/vaadin/marcus/client/BookingService.java
================
package org.vaadin.marcus.client;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.vaadin.marcus.data.BookingStatus;
import org.vaadin.marcus.service.BookingDetails;
import org.vaadin.marcus.service.FlightService;

import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;

@BrowserCallable
@AnonymousAllowed
@Service
public class BookingService {
    private final FlightService flightService;

    public BookingService(FlightService flightService) {
        this.flightService = flightService;
    }

    public List<BookingDetails> getBookings() {
        return flightService.getBookings().stream()
            .filter(booking -> booking != null && booking.getFirstName() != null)
            .collect(Collectors.toList());
    }

    //confirm booking
    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        flightService.confirmBooking(bookingNumber, firstName, lastName);
    }

    public List<BookingDetails> getConfirmedBookings() {
        return flightService.getBookings().stream()
                .filter(booking -> booking != null && 
                        booking.getBookingStatus() != null && 
                        booking.getBookingStatus().equals(BookingStatus.CONFIRMED.toString()))
                .collect(Collectors.toList());
    }
}

================
File: src/main/java/org/vaadin/marcus/client/package-info.java
================
@NonNullApi
package org.vaadin.marcus.client;

import org.springframework.lang.NonNullApi;

================
File: src/main/java/org/vaadin/marcus/client/PortfolioService.java
================
package org.vaadin.marcus.client;

import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Service;
import org.vaadin.marcus.service.AccountDetails;

import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;

@BrowserCallable
@AnonymousAllowed
@Service
public class PortfolioService {
    public List<AccountDetails> getAccounts() {
        // This is a mock implementation. Replace with actual data retrieval logic.
        return Arrays.asList(
            new AccountDetails("ACC001", "Savings", "1000.00"),
            new AccountDetails("ACC002", "Checking", "500.00")
        );
    }
}

================
File: src/main/java/org/vaadin/marcus/config/CoinbaseConfig.java
================
package org.vaadin.marcus.config;

import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.vaadin.marcus.service.CoinbaseService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.util.concurrent.TimeUnit;

@Configuration
public class CoinbaseConfig {

    @Value("${coinbase.api.baseUrl}:")
    private String baseUrl;

    @Value("${coinbase.api.key}")
    private String apiKey;

    @Value("${coinbase.api.secret}")
    private String apiSecret;

    @Value("${coinbase.api.passphrase}")
    private String apiPassphrase;

    @Bean
    public OkHttpClient okHttpClient() {
        return new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS)
                .retryOnConnectionFailure(true)
                .build();
    }

    @Bean
    public Gson gson() {
        return new GsonBuilder()
                .registerTypeAdapterFactory(OptionalTypeAdapter.create())
                .create();
    }

    @Bean
    public CoinbaseService coinbaseService(OkHttpClient okHttpClient, Gson gson) {
        return new CoinbaseService(okHttpClient, gson, baseUrl, apiKey, apiSecret, apiPassphrase);
    }
}

================
File: src/main/java/org/vaadin/marcus/config/OptionalTypeAdapter.java
================
package org.vaadin.marcus.config;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Optional;

import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

public class OptionalTypeAdapter implements TypeAdapterFactory {

    @SuppressWarnings({ "unchecked", "rawtypes" })
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
        if (!Optional.class.isAssignableFrom(type.getRawType())) {
            return null;
        }

        Type innerType = ((ParameterizedType) type.getType()).getActualTypeArguments()[0];
        TypeAdapter<?> innerAdapter = gson.getAdapter(TypeToken.get(innerType));

        return (TypeAdapter<T>) new OptionalAdapter(innerAdapter);
    }

    private static class OptionalAdapter<E> extends TypeAdapter<Optional<E>> {
        private final TypeAdapter<E> innerAdapter;

        OptionalAdapter(TypeAdapter<E> innerAdapter) {
            this.innerAdapter = innerAdapter;
        }

        @Override
        public void write(JsonWriter out, Optional<E> value) throws java.io.IOException {
            if (value.isPresent()) {
                innerAdapter.write(out, value.get());
            } else {
                out.nullValue();
            }
        }

        @Override
        public Optional<E> read(JsonReader in) throws java.io.IOException {
            return Optional.ofNullable(innerAdapter.read(in));
        }
    }

    public static TypeAdapterFactory create() {
        return new OptionalTypeAdapter();
    }
}

================
File: src/main/java/org/vaadin/marcus/config/SecurityConfig.java
================
package org.vaadin.marcus.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http
			.authorizeHttpRequests((authorize) -> authorize
				.requestMatchers("/login", "/logout").permitAll()
				.anyRequest().authenticated()
			)
			.httpBasic(withDefaults())
			.formLogin(withDefaults());
        return http.build();
	}

	@Bean
	public UserDetailsService userDetailsService() {
		UserDetails userDetails = org.springframework.security.core.userdetails.User.builder()
			.username("user")
			.password("{noop}password")
			.roles("USER")
			.build();

		return new InMemoryUserDetailsManager(userDetails);
	}
}

================
File: src/main/java/org/vaadin/marcus/config/WebConfig.java
================
package org.vaadin.marcus.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebSecurity
public class WebConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**")
                .allowedOrigins("http://localhost:3000") // Adjust this to your frontend URL
                .allowedMethods("POST", "GET", "PUT", "DELETE", "OPTIONS")
                .allowCredentials(true);
    }

}

================
File: src/main/java/org/vaadin/marcus/controller/LoginController.java
================
package org.vaadin.marcus.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.vaadin.marcus.service.UserService; // Assuming you have a UserService for authentication

@Controller
public class LoginController {

    private final Map<String, String> sessionCache = new HashMap<>(); // Simple in-memory cache

    public LoginController(UserService userService) {
    }

    public boolean login(String username, String password) {
        // Implement your authentication logic here
        if (authenticate(username, password)) {
            String sessionId = generateSessionId(username); // Generate a session ID
            sessionCache.put(sessionId, username); // Store session in cache
            return true;
        }
        return false;
    }

    public String getCurrentSessionId() {
        // Return the last session ID (this is a simple example)
        return sessionCache.keySet().stream().findFirst().orElse(null);
    }

    public void logout(String sessionId) {
        sessionCache.remove(sessionId); // Remove session from cache
    }

    private boolean authenticate(String username, String password) {
        // Replace with actual authentication logic
        return "user".equals(username) && "password".equals(password);
    }

    private String generateSessionId(String username) {
        // Generate a unique session ID (this is a simple example)
        return username + "-" + System.currentTimeMillis();
    }

    public String getUserFromSession(String sessionId) {
        return sessionCache.get(sessionId); // Retrieve user from session cache
    }
}

================
File: src/main/java/org/vaadin/marcus/data/Booking.java
================
package org.vaadin.marcus.data;

import java.time.LocalDate;
import java.util.List;

public class Booking {

    private String bookingNumber;
    private LocalDate date;
    private LocalDate bookingTo;
    private Customer customer;
    private String from;
    private String to;
    private BookingStatus bookingStatus;
    private BookingClass bookingClass;
    private List<Booking> legs;

    public Booking(String bookingNumber, LocalDate date, Customer customer, BookingStatus bookingStatus, String from, String to, BookingClass bookingClass) {
        this.bookingNumber = bookingNumber;
        this.date = date;
        this.customer = customer;
        this.bookingStatus = bookingStatus;
        this.from = from;
        this.to = to;
        this.bookingClass = bookingClass;
    }


    public String getBookingNumber() {
        return bookingNumber;
    }

    public void setBookingNumber(String bookingNumber) {
        this.bookingNumber = bookingNumber;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalDate getBookingTo() {
        return bookingTo;
    }

    public void setBookingTo(LocalDate bookingTo) {
        this.bookingTo = bookingTo;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public BookingStatus getBookingStatus() {
        return bookingStatus;
    }

    public void setBookingStatus(BookingStatus bookingStatus) {
        this.bookingStatus = bookingStatus;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public BookingClass getBookingClass() {
        return bookingClass;
    }

    public void setBookingClass(BookingClass bookingClass) {
        this.bookingClass = bookingClass;
    }

    public List<Booking> getLegs() {
        return legs;
    }

    public void setLegs(List<Booking> legs) {
        this.legs = legs;
    }
}

================
File: src/main/java/org/vaadin/marcus/data/BookingClass.java
================
package org.vaadin.marcus.data;

public enum BookingClass {
    ECONOMY, PREMIUM_ECONOMY, BUSINESS
}

================
File: src/main/java/org/vaadin/marcus/data/BookingData.java
================
package org.vaadin.marcus.data;

import java.util.ArrayList;
import java.util.List;

public class BookingData {

    private List<Customer> customers = new ArrayList<>();
    private List<Booking> bookings = new ArrayList<>();


    public List<Customer> getCustomers() {
        return customers;
    }

    public void setCustomers(List<Customer> customers) {
        this.customers = customers;
    }

    public List<Booking> getBookings() {
        return bookings;
    }

    public void setBookings(List<Booking> bookings) {
        this.bookings = bookings;
    }

    //get available bookings ones with no first and last name
    public List<Booking> getAvailableBookings() {
        return bookings.stream().filter(b -> b.getCustomer().getFirstName() == null && b.getCustomer().getLastName() == null).toList();
    }

    //update booking in db
    public void updateBooking(Booking booking) {
        bookings.set(bookings.indexOf(booking), booking);
    }

    //add booking to db
    public void addBooking(Booking booking) {
        bookings.add(booking);
    }
}

================
File: src/main/java/org/vaadin/marcus/data/BookingStatus.java
================
package org.vaadin.marcus.data;

public enum BookingStatus {
    CONFIRMED, COMPLETED, CANCELLED, AWAITING_CONFIRMATION, AVAILABLE, PART_OF_MULTI_LEG
}

================
File: src/main/java/org/vaadin/marcus/data/Customer.java
================
package org.vaadin.marcus.data;

import java.util.ArrayList;
import java.util.List;

public class Customer {

    private String firstName;
    private String lastName;

    private List<Booking> bookings = new ArrayList<>();

    public Customer() {
    }

    public Customer(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public List<Booking> getBookings() {
        return bookings;
    }

    public void setBookings(List<Booking> bookings) {
        this.bookings = bookings;
    }
}

================
File: src/main/java/org/vaadin/marcus/data/package-info.java
================
@NonNullApi
package org.vaadin.marcus.data;

import org.springframework.lang.NonNullApi;

================
File: src/main/java/org/vaadin/marcus/frontend/views/DeFiBalancesView.java
================
package org.vaadin.marcus.frontend.views;

import com.vaadin.flow.router.Route;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H1;
import org.vaadin.marcus.model.DeFiBalance;
import org.vaadin.marcus.model.TokenBalance;
import org.vaadin.marcus.service.FlightService;

import java.util.Map;
import java.util.List;
import java.util.ArrayList;

@Route("defi-balances")
public class DeFiBalancesView extends VerticalLayout {
    private Grid<DeFiBalance> grid = new Grid<>(DeFiBalance.class);

    public DeFiBalancesView(FlightService flightService) {
        add(new H1("DeFi Account Balances"));
        grid.setItems(convertToDeFiBalances(flightService.getDeFiAccountBalances("user123")));
        grid.addColumn(DeFiBalance::getChain).setHeader("Chain");
        grid.addColumn(DeFiBalance::getToken).setHeader("Token");
        grid.addColumn(DeFiBalance::getBalance).setHeader("Balance (USD)");
        add(grid);
    }

    private List<DeFiBalance> convertToDeFiBalances(Map<String, List<TokenBalance>> balances) {
        List<DeFiBalance> defiBalances = new ArrayList<>();
        balances.forEach((chain, tokens) -> {
            tokens.forEach(tokenBalance -> {
                double usdValue = calculateUsdValue(tokenBalance.getToken(), tokenBalance.getBalance());
                defiBalances.add(new DeFiBalance(chain, tokenBalance.getToken(), usdValue));
            });
        });
        return defiBalances;
    }

    private double calculateUsdValue(String token, double balance) {
        // Mocked USD conversion rates
        Map<String, Double> conversionRates = Map.of(
            "ETH", 2000.0,
            "USDC", 1.0,
            "BNB", 300.0,
            "MATIC", 1.5
        );
        return balance * conversionRates.getOrDefault(token, 0.0);
    }
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/Coinbase4jTools.java
================
package org.vaadin.marcus.langchain4j;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.springframework.stereotype.Component;
import org.vaadin.marcus.service.AccountDetails;
import org.vaadin.marcus.service.CoinbaseService;

import dev.langchain4j.agent.tool.Tool;

@Component
public class Coinbase4jTools {
    
    private final CoinbaseService coinbaseService;
    private AccountDetails cachedAccount;
    private long lastFetchTime;
    private static final long CACHE_DURATION = TimeUnit.MINUTES.toMillis(5); // Cache for 5 minutes

    public Coinbase4jTools(CoinbaseService coinbaseService) {
        if (coinbaseService == null) {
            throw new IllegalArgumentException("CoinbaseService cannot be null");
        }
        this.coinbaseService = coinbaseService;
    }

    // Mock authentication method
    private boolean mockAuthenticate() {
        // Simulate successful authentication
        return true; // Change this logic as needed for your mock
    }

    @Tool("Get account")
    public AccountDetails getAccount() {
        if (!mockAuthenticate()) {
            System.err.println("Authentication failed");
            return null; // Or handle as needed
        }
        
        long currentTime = System.currentTimeMillis();
        if (cachedAccount == null || (currentTime - lastFetchTime) > CACHE_DURATION) {
            try {
                System.out.println("Fetching fresh account from Coinbase API");
                cachedAccount = coinbaseService.getAccounts();
                lastFetchTime = currentTime;
            } catch (IOException ex) {
                System.err.println("Error fetching account: " + ex.getMessage());
                return cachedAccount;
            }
        } else {
            System.out.println("Returning cached account");
        }
        return cachedAccount;
    }
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jAssistant.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.service.MemoryId;
import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.TokenStream;
import dev.langchain4j.service.UserMessage;
import dev.langchain4j.service.spring.AiService;

@AiService
public interface LangChain4jAssistant {

    @SystemMessage("""
            You are a helpful assistant.

            Today is {{current_date}}.
            """)
    TokenStream chat(@MemoryId String chatId, @UserMessage String userMessage);
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jConfig.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.data.document.parser.TextDocumentParser;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.memory.chat.ChatMemoryProvider;
import dev.langchain4j.memory.chat.TokenWindowChatMemory;
import dev.langchain4j.model.Tokenizer;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.model.embedding.onnx.allminilml6v2.AllMiniLmL6V2EmbeddingModel;
import dev.langchain4j.rag.content.retriever.ContentRetriever;
import dev.langchain4j.rag.content.retriever.EmbeddingStoreContentRetriever;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;
import dev.langchain4j.store.embedding.inmemory.InMemoryEmbeddingStore;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ResourceLoader;

import static dev.langchain4j.data.document.loader.FileSystemDocumentLoader.loadDocument;
import static dev.langchain4j.data.document.splitter.DocumentSplitters.recursive;

@Configuration
public class LangChain4jConfig {

    @Bean
    EmbeddingModel embeddingModel() {
        return new AllMiniLmL6V2EmbeddingModel();
    }

    @Bean
    EmbeddingStore<TextSegment> embeddingStore() {
        return new InMemoryEmbeddingStore<>();
    }

    // In the real world, ingesting documents would often happen separately, on a CI server or similar
    @Bean
    CommandLineRunner ingestDocsForLangChain(
            EmbeddingModel embeddingModel,
            EmbeddingStore<TextSegment> embeddingStore,
            Tokenizer tokenizer, // Tokenizer is provided by langchain4j-open-ai-spring-boot-starter
            ResourceLoader resourceLoader
    ) {
        return args -> {
            var resource = resourceLoader.getResource("classpath:terms-of-service.txt");
            var termsOfUse = loadDocument(resource.getFile().toPath(), new TextDocumentParser());
            var ingestor = EmbeddingStoreIngestor.builder()
                    .documentSplitter(recursive(50, 0, tokenizer))
                    .embeddingModel(embeddingModel)
                    .embeddingStore(embeddingStore)
                    .build();
            ingestor.ingest(termsOfUse);
        };
    }

    @Bean
    ContentRetriever contentRetriever(
            EmbeddingStore<TextSegment> embeddingStore,
            EmbeddingModel embeddingModel
    ) {
        return EmbeddingStoreContentRetriever.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .maxResults(2)
                .minScore(0.6)
                .build();
    }

    @Bean
    ChatMemoryProvider chatMemoryProvider(Tokenizer tokenizer) {
        // Tokenizer is provided by langchain4j-open-ai-spring-boot-starter
        return chatId -> TokenWindowChatMemory.withMaxTokens(1000, tokenizer);
    }
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jTools.java
================
package org.vaadin.marcus.langchain4j;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.vaadin.marcus.model.TokenBalance;
import org.vaadin.marcus.service.DeBankMockService;
import org.springframework.web.client.RestTemplate;

import dev.langchain4j.agent.tool.Tool;

@Component
public class LangChain4jTools {

    private final DeBankMockService deBankMockService;
    private final RestTemplate restTemplate;
    private final String debankApiKey;

    public LangChain4jTools(DeBankMockService deBankMockService, RestTemplate restTemplate, @Value("${debank.api.key}") String debankApiKey) {
        this.deBankMockService = deBankMockService;
        this.restTemplate = restTemplate;
        this.debankApiKey = debankApiKey;
    }

    @Tool("Retrieve DeFi account balances for a specific chain")
    public List<TokenBalance> getDeFiAccountBalances(String chain) {
        return deBankMockService.getBalancesByChain(chain);
    }

    @Tool("Get total portfolio value in USD")
    public BigDecimal getTotalPortfolioValueUSD() {
        return deBankMockService.getTotalPortfolioValue();
    }

    @Tool("Get USD price for a specific token")
    public BigDecimal getTokenUSDPrice(String token) {
        return deBankMockService.getTokenPrice(token);
    }

    @Tool("Generate portfolio insights")
    public List<String> generatePortfolioInsights() {
        return deBankMockService.generatePortfolioInsights();
    }

    public Map<String, List<TokenBalance>> fetchDeFiBalances(String userId) {
        // Mocked data for DeFi balances
        Map<String, List<TokenBalance>> balances = new HashMap<>();
        balances.put("Ethereum", Arrays.asList(
            new TokenBalance("ETH", 10.5),
            new TokenBalance("USDC", 1000.0)
        ));
        balances.put("Binance", Arrays.asList(
            new TokenBalance("BNB", 5.2)
        ));
        balances.put("Polygon", Arrays.asList(
            new TokenBalance("MATIC", 500.0)
        ));
        return balances;
    }

    public String getChainInfo(String chainId) {
        String url = "https://pro-openapi.debank.com/v1/chain?id=" + chainId;
        return restTemplate.getForObject(url, String.class);
    }
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/RouteUtil.java
================
package org.vaadin.marcus.langchain4j;

import org.springframework.stereotype.Component;

import com.vaadin.flow.router.RouteConfiguration; // Import the Component annotation

@Component // Add this annotation to make RouteUtil a Spring bean
public class RouteUtil {

    public boolean isRouteAllowed(String route) {
        // Check if the route is registered in the current session's route configuration
        return RouteConfiguration.forSessionScope().getRoute(route) != null; // Use getRoute() instead
    }
}

================
File: src/main/java/org/vaadin/marcus/model/DeFiBalance.java
================
package org.vaadin.marcus.model;

public class DeFiBalance {
    private String chain;
    private String token;
    private double balance;

    // Constructor, getters, and setters
    public DeFiBalance(String chain, String token, double balance) {
        this.chain = chain;
        this.token = token;
        this.balance = balance;
    }

    public String getChain() {
        return chain;
    }

    public void setChain(String chain) {
        this.chain = chain;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}

================
File: src/main/java/org/vaadin/marcus/model/TokenBalance.java
================
package org.vaadin.marcus.model;

public class TokenBalance {
    private String token;
    private double balance;

    // Constructor, getters, and setters
    public TokenBalance(String token, double balance) {
        this.token = token;
        this.balance = balance;
    }

    // Getters and setters
    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}

================
File: src/main/java/org/vaadin/marcus/service/AccountDetails.java
================
package org.vaadin.marcus.service;

public class AccountDetails {
    private String accountNumber;
    private String accountType;
    private String balance;

    public AccountDetails(String accountNumber, String accountType, String balance) {
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.balance = balance;
    }

    // Getters and setters
    public String getAccountNumber() { return accountNumber; }
    public void setAccountNumber(String accountNumber) { this.accountNumber = accountNumber; }

    public String getAccountType() { return accountType; }
    public void setAccountType(String accountType) { this.accountType = accountType; }

    public String getBalance() { return balance; }
    public void setBalance(String balance) { this.balance = balance; }
}

================
File: src/main/java/org/vaadin/marcus/service/BookingDetails.java
================
package org.vaadin.marcus.service;

public class BookingDetails {
    private String bookingNumber;
    private String firstName;
    private String lastName;
    private String date;
    private String from;
    private String to;
    private String bookingStatus;
    private String bookingClass;

    // Constructor
    public BookingDetails(String bookingNumber, String firstName, String lastName, String date, String from, String to, String bookingStatus, String bookingClass) {
        this.bookingNumber = bookingNumber;
        this.firstName = firstName;
        this.lastName = lastName;
        this.date = date;
        this.from = from;
        this.to = to;
        this.bookingStatus = bookingStatus;
        this.bookingClass = bookingClass;
    }

    // Getters and setters
    public String getBookingNumber() { return bookingNumber; }
    public void setBookingNumber(String bookingNumber) { this.bookingNumber = bookingNumber; }

    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getDate() { return date; }
    public void setDate(String date) { this.date = date; }

    public String getFrom() { return from; }
    public void setFrom(String from) { this.from = from; }

    public String getTo() { return to; }
    public void setTo(String to) { this.to = to; }

    public String getBookingStatus() { return bookingStatus; }
    public void setBookingStatus(String bookingStatus) { this.bookingStatus = bookingStatus; }

    public String getBookingClass() { return bookingClass; }
    public void setBookingClass(String bookingClass) { this.bookingClass = bookingClass; }
}

================
File: src/main/java/org/vaadin/marcus/service/CoinbaseService.java
================
package org.vaadin.marcus.service;

import java.io.IOException;
import java.util.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@Service
public class CoinbaseService {
    private static final Logger logger = LoggerFactory.getLogger(CoinbaseService.class);

    private final OkHttpClient httpClient;
    private final Gson gson;
    private final String baseUrl;
    private final String apiKey;
    private final String apiSecret;
    private final String apiPassphrase;

    public CoinbaseService(OkHttpClient httpClient, Gson gson, @Value("${coinbase.api.baseUrl}") String baseUrl, 
                           @Value("${coinbase.api.key}") String apiKey, 
                           @Value("${coinbase.api.secret}") String apiSecret, 
                           @Value("${coinbase.api.passphrase}") String apiPassphrase) {
        this.httpClient = httpClient;
        this.gson = gson;
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        this.apiSecret = apiSecret;
        this.apiPassphrase = apiPassphrase;
    }

    public AccountDetails getAccounts() throws IOException {
        String timestamp = String.valueOf(System.currentTimeMillis() / 1000);
        String method = "GET";
        String requestPath = "/accounts";
        String prehash = timestamp + method + requestPath;
        String signature = generateSignature(prehash, apiSecret);

        Request request = new Request.Builder()
                .url(baseUrl + requestPath)
                .addHeader("CB-ACCESS-KEY", apiKey)
                .addHeader("CB-ACCESS-SIGN", signature)
                .addHeader("CB-ACCESS-TIMESTAMP", timestamp)
                .addHeader("CB-ACCESS-PASSPHRASE", apiPassphrase)
                .addHeader("Content-Type", "application/json")
                .build();

        logger.debug("Sending request to Coinbase API: {}", request.url());
        try (Response response = httpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                logger.error("Coinbase API request failed. Status: {}, Body: {}", response.code(), response.body().string());
                throw new IOException("Unexpected code " + response);
            }
            String responseBody = response.body().string();
            logger.debug("Coinbase API response: {}", responseBody);
            AccountDetails account = gson.fromJson(responseBody, AccountDetails.class);
            logger.info("Retrieved account from Coinbase");
            return account;
        }
    }

    private String generateSignature(String prehash, String secret) throws IOException {
        try {
            byte[] secretDecoded = Base64.getDecoder().decode(secret);
            Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(secretDecoded, "HmacSHA256");
            sha256_HMAC.init(secret_key);
            return Base64.getEncoder().encodeToString(sha256_HMAC.doFinal(prehash.getBytes()));
        } catch (Exception e) {
            logger.error("Error generating signature", e);
            throw new IOException("Error generating signature", e);
        }
    }
}

================
File: src/main/java/org/vaadin/marcus/service/DeBankMockService.java
================
package org.vaadin.marcus.service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.vaadin.marcus.model.TokenBalance;

@Service
public class DeBankMockService {

    private Map<String, List<TokenBalance>> chainBalances;
    private Map<String, BigDecimal> tokenPrices;

    public DeBankMockService() {
        initializeMockData();
    }

    private void initializeMockData() {
        chainBalances = new HashMap<>();
        tokenPrices = new HashMap<>();

        // Ethereum balances
        chainBalances.put("ethereum", Arrays.asList(
            new TokenBalance("ETH", 2.5),
            new TokenBalance("USDC", 1000.0),
            new TokenBalance("LINK", 50.0)
        ));

        // Binance Smart Chain balances
        chainBalances.put("bsc", Arrays.asList(
            new TokenBalance("BNB", 10.0),
            new TokenBalance("CAKE", 100.0),
            new TokenBalance("BUSD", 500.0)
        ));

        // Polygon balances
        chainBalances.put("polygon", Arrays.asList(
            new TokenBalance("MATIC", 1000.0),
            new TokenBalance("AAVE", 5.0),
            new TokenBalance("USDT", 750.0)
        ));

        // Mock token prices in USD
        tokenPrices.put("ETH", new BigDecimal("2000"));
        tokenPrices.put("USDC", BigDecimal.ONE);
        tokenPrices.put("LINK", new BigDecimal("15"));
        tokenPrices.put("BNB", new BigDecimal("300"));
        tokenPrices.put("CAKE", new BigDecimal("5"));
        tokenPrices.put("BUSD", BigDecimal.ONE);
        tokenPrices.put("MATIC", new BigDecimal("0.80"));
        tokenPrices.put("AAVE", new BigDecimal("100"));
        tokenPrices.put("USDT", BigDecimal.ONE);
    }

    public List<TokenBalance> getBalancesByChain(String chain) {
        return chainBalances.getOrDefault(chain.toLowerCase(), new ArrayList<>());
    }

    public BigDecimal getTokenPrice(String token) {
        return tokenPrices.getOrDefault(token.toUpperCase(), BigDecimal.ZERO);
    }

    public BigDecimal getTotalPortfolioValue() {
        return chainBalances.values().stream()
            .flatMap(List::stream)
            .map(balance -> balance.getBalance().multiply(getTokenPrice(balance.getToken())))
            .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    public List<String> generatePortfolioInsights() {
        List<String> insights = new ArrayList<>();
        
        // Calculate total portfolio value
        BigDecimal totalValue = getTotalPortfolioValue();
        insights.add("Your total portfolio value is $" + totalValue.setScale(2, RoundingMode.HALF_UP));

        // Calculate diversification
        Map<String, BigDecimal> chainValues = calculateChainValues();
        String mostValuableChain = chainValues.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("");
        BigDecimal mostValuableChainPercentage = chainValues.get(mostValuableChain).divide(totalValue, 4, RoundingMode.HALF_UP).multiply(new BigDecimal("100"));
        insights.add(String.format("Your portfolio is most heavily weighted in %s at %.2f%% of total value.", mostValuableChain, mostValuableChainPercentage));

        // Suggest diversification if needed
        if (mostValuableChainPercentage.compareTo(new BigDecimal("70")) > 0) {
            insights.add("Consider diversifying your portfolio across more chains to reduce risk.");
        }

        // Identify best performing asset
        String bestPerformingAsset = findBestPerformingAsset();
        insights.add("Your best performing asset is " + bestPerformingAsset + ".");

        // Suggest staking opportunities
        List<String> stakingOpportunities = findStakingOpportunities();
        if (!stakingOpportunities.isEmpty()) {
            insights.add("Consider staking opportunities for: " + String.join(", ", stakingOpportunities));
        }

        return insights;
    }

    private Map<String, BigDecimal> calculateChainValues() {
        return chainBalances.entrySet().stream()
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        entry -> entry.getValue().stream()
                                .map(balance -> balance.getBalance().multiply(getTokenPrice(balance.getToken())))
                                .reduce(BigDecimal.ZERO, BigDecimal::add)
                ));
    }

    private String findBestPerformingAsset() {
        return chainBalances.values().stream()
                .flatMap(List::stream)
                .max(Comparator.comparing(balance -> balance.getBalance().multiply(getTokenPrice(balance.getToken()))))
                .map(TokenBalance::getToken)
                .orElse("");
    }

    private List<String> findStakingOpportunities() {
        // Mock implementation - in a real scenario, this would check current staking rates and opportunities
        return Arrays.asList("ETH", "MATIC", "CAKE");
    }
}

================
File: src/main/java/org/vaadin/marcus/service/DeFiAccountService.java
================
package org.vaadin.marcus.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

@Service
public class DeFiAccountService {

    private List<AccountBalance> accountBalances;
    private Map<String, BigDecimal> usdValues;

    public DeFiAccountService() {
        initializeMockData();
    }

    private void initializeMockData() {
        accountBalances = new ArrayList<>();
        accountBalances.add(new AccountBalance("Ethereum", "ETH", new BigDecimal("10.5")));
        accountBalances.add(new AccountBalance("Ethereum", "USDC", new BigDecimal("1000")));
        accountBalances.add(new AccountBalance("Binance Smart Chain", "BNB", new BigDecimal("5.2")));
        accountBalances.add(new AccountBalance("Binance Smart Chain", "CAKE", new BigDecimal("100")));
        accountBalances.add(new AccountBalance("Polygon", "MATIC", new BigDecimal("500")));
        accountBalances.add(new AccountBalance("Polygon", "AAVE", new BigDecimal("10")));

        usdValues = new HashMap<>();
        usdValues.put("ETH", new BigDecimal("2000.00"));
        usdValues.put("USDC", new BigDecimal("1.00"));
        usdValues.put("BNB", new BigDecimal("300.00"));
        usdValues.put("CAKE", new BigDecimal("5.00"));
        usdValues.put("MATIC", new BigDecimal("0.80"));
        usdValues.put("AAVE", new BigDecimal("100.00"));
    }

    public List<AccountBalance> getAccountBalances() {
        return accountBalances;
    }

    public List<AccountBalance> getAccountBalancesByChain(String chain) {
        return accountBalances.stream()
                .filter(balance -> balance.getChain().equalsIgnoreCase(chain))
                .collect(Collectors.toList());
    }

    public BigDecimal getTotalPortfolioValueUSD() {
        return accountBalances.stream()
                .map(balance -> balance.getBalance().multiply(usdValues.getOrDefault(balance.getToken(), BigDecimal.ZERO)))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    public Map<String, BigDecimal> getUSDValues() {
        return usdValues;
    }

    public static class AccountBalance {
        private String chain;
        private String token;
        private BigDecimal balance;

        public AccountBalance(String chain, String token, BigDecimal balance) {
            this.chain = chain;
            this.token = token;
            this.balance = balance;
        }

        // Getters and setters
        public String getChain() { return chain; }
        public void setChain(String chain) { this.chain = chain; }
        public String getToken() { return token; }
        public void setToken(String token) { this.token = token; }
        public BigDecimal getBalance() { return balance; }
        public void setBalance(BigDecimal balance) { this.balance = balance; }
    }
}

================
File: src/main/java/org/vaadin/marcus/service/FlightService.java
================
package org.vaadin.marcus.service;

import org.springframework.stereotype.Service;
import org.vaadin.marcus.data.*;
import org.vaadin.marcus.langchain4j.LangChain4jTools;
import org.vaadin.marcus.model.TokenBalance;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.Map;

@Service
public class FlightService {

    private final BookingData db;
    private Set<String> usedFlightNumbers = new HashSet<>();
    private Random random = new Random();
    private List<String> airlineCodes = List.of("FA", "AA", "VA", "BA", "LH", "UA");
    private final LangChain4jTools langChain4jTools;

    public FlightService(LangChain4jTools langChain4jTools) {
        this.langChain4jTools = langChain4jTools;
        db = new BookingData();

        initDemoData();
    }

    private void initDemoData() {
        List<String> firstNames = List.of("John", "Jane", "Michael", "Sarah", "Robert");
        List<String> lastNames = List.of("Doe", "Smith", "Johnson", "Williams", "Taylor");
        List<String> airportCodes = List.of("LAX", "SFO", "JFK", "LHR", "CDG", "ARN", "HEL", "TXL", "MUC", "FRA", "MAD", "SJC");
        Random random = new Random();

        var customers = new ArrayList<Customer>();
        var bookings = new ArrayList<Booking>();

        for (int i = 0; i < 5; i++) {
            String firstName = firstNames.get(i);
            String lastName = lastNames.get(i);
            String from = airportCodes.get(random.nextInt(airportCodes.size()));
            String to = airportCodes.get(random.nextInt(airportCodes.size()));
            BookingClass bookingClass = BookingClass.values()[random.nextInt(BookingClass.values().length)];
            Customer customer = new Customer();
            customer.setFirstName(firstName);
            customer.setLastName(lastName);

            LocalDate date = LocalDate.now().plusDays(2*i);

            Booking booking = new Booking(generateUniqueFlightNumber(), date, customer, BookingStatus.AWAITING_CONFIRMATION, from, to, bookingClass);
            customer.getBookings().add(booking);

            customers.add(customer);
            bookings.add(booking);
        }

        // Generate some available bookings
        for(int i = 0; i < 30; i++){
            String from = airportCodes.get(random.nextInt(airportCodes.size()));
            String to = airportCodes.get(random.nextInt(airportCodes.size()));
            BookingClass bookingClass = BookingClass.values()[random.nextInt(BookingClass.values().length)];
            Booking booking = new Booking(generateUniqueFlightNumber(), LocalDate.now().plusDays(2*i), new Customer(), BookingStatus.AVAILABLE, from, to, bookingClass);
            bookings.add(booking);
        }

        // Reset the database on each start
        db.setCustomers(customers);
        db.setBookings(bookings);

        System.out.println("Demo data initialized");
    }

    public List<BookingDetails> getBookings() {
        return db.getBookings().stream().map(this::toBookingDetails).toList();
    }

    private Booking findBooking(String bookingNumber, String firstName, String lastName) {
        return db.getBookings().stream()
                .filter(b -> b.getBookingNumber().equalsIgnoreCase(bookingNumber))
                .filter(b -> b.getCustomer().getFirstName().equalsIgnoreCase(firstName))
                .filter(b -> b.getCustomer().getLastName().equalsIgnoreCase(lastName))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));
    }

    public BookingDetails getBookingDetails(String bookingNumber, String firstName, String lastName) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        return toBookingDetails(booking);
    }

    public void changeBooking(String bookingNumber, String firstName, String lastName,
                              LocalDate newFlightDate, String newDepartureAirport, String newArrivalAirport) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        if(booking.getDate().isBefore(LocalDate.now().plusDays(1))){
            throw new IllegalArgumentException("Booking cannot be changed within 24 hours of the start date.");
        }
        booking.setDate(newFlightDate);
        booking.setFrom(newDepartureAirport);
        booking.setTo(newArrivalAirport);
    }

    public void cancelBooking(String bookingNumber, String firstName, String lastName) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        if (booking.getDate().isBefore(LocalDate.now().plusDays(2))) {
            throw new IllegalArgumentException("Booking cannot be cancelled within 48 hours of the start date.");
        }
        booking.setBookingStatus(BookingStatus.AVAILABLE);
    }

    public void updateBooking(String bookingNumber, String firstName, String lastName){
        var booking = getBookingFromFlightNumber(bookingNumber);
        booking.setCustomer(new Customer(firstName, lastName));
        booking.setBookingStatus(BookingStatus.AWAITING_CONFIRMATION);
        db.updateBooking(booking);
    }

    public List<BookingDetails> getAvailableBookings() {
        return db.getAvailableBookings().stream().map(this::toBookingDetails).toList();
    }

    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        booking.setBookingStatus(BookingStatus.CONFIRMED);
        db.updateBooking(booking);
    }

    // Get booking from flight number
    public Booking getBookingFromFlightNumber(String flightNumber){
        return db.getBookings().stream()
                .filter(b -> b.getBookingNumber().equalsIgnoreCase(flightNumber))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));
    }

    private BookingDetails toBookingDetails(Booking booking){
        return new BookingDetails(
                booking.getBookingNumber(),
                booking.getCustomer().getFirstName(),
                booking.getCustomer().getLastName(),
                booking.getDate().toString(), // Convert LocalDate to String
                booking.getFrom(),
                booking.getTo(),
                booking.getBookingStatus().toString(), // Convert BookingStatus to String
                booking.getBookingClass().toString()
        );
    }

    public String generateUniqueFlightNumber() {
        String flightNumber;
        do {
            flightNumber = generateFlightNumber();
        } while (!usedFlightNumbers.add(flightNumber));
        return flightNumber;
    }

    private String generateFlightNumber() {
        String airline = airlineCodes.get(random.nextInt(airlineCodes.size()));
        int number = random.nextInt(1000, 9999);
        return airline + number;
    }

    // Get a list of confirmed bookings
    public List<BookingDetails> getConfirmedBookings() {
        return db.getBookings().stream()
                .filter(b -> b.getBookingStatus() == BookingStatus.CONFIRMED)
                .map(this::toBookingDetails)
                .toList();
    }

    public BookingDetails createMultiLegBooking(List<String> flightNumbers, String firstName, String lastName) {
        List<Booking> legs = flightNumbers.stream()
                .map(this::getBookingFromFlightNumber)
                .collect(Collectors.toList());

        if (legs.stream().anyMatch(leg -> leg.getBookingStatus() != BookingStatus.AVAILABLE)) {
            throw new IllegalStateException("One or more flights are not available for booking.");
        }

        Customer customer = new Customer(firstName, lastName);
        Booking multiLegBooking = new Booking(
            generateUniqueFlightNumber(),
            legs.get(0).getDate(),
            customer,
            BookingStatus.AWAITING_CONFIRMATION,
            legs.get(0).getFrom(),
            legs.get(legs.size() - 1).getTo(),
            legs.get(0).getBookingClass()
        );

        multiLegBooking.setLegs(legs);

        legs.forEach(leg -> {
            leg.setBookingStatus(BookingStatus.PART_OF_MULTI_LEG);
            db.updateBooking(leg);
        });

        db.addBooking(multiLegBooking);
        return toBookingDetails(multiLegBooking);
    }

    public List<BookingDetails> getAvailableConnections(String from, String to, LocalDate date) {
        return db.getBookings().stream()
                .filter(b -> b.getBookingStatus() == BookingStatus.AVAILABLE)
                .filter(b -> b.getFrom().equals(from) && b.getDate().equals(date))
                .flatMap(firstLeg -> db.getBookings().stream()
                    .filter(secondLeg -> secondLeg.getBookingStatus() == BookingStatus.AVAILABLE)
                    .filter(secondLeg -> secondLeg.getFrom().equals(firstLeg.getTo()) && secondLeg.getTo().equals(to))
                    .filter(secondLeg -> secondLeg.getDate().equals(firstLeg.getDate()) || secondLeg.getDate().equals(firstLeg.getDate().plusDays(1)))
                    .map(secondLeg -> List.of(firstLeg, secondLeg)))
                .map(legs -> {
                    Booking firstLeg = legs.get(0);
                    Booking secondLeg = legs.get(1);
                    return new BookingDetails(
                        firstLeg.getBookingNumber() + "+" + secondLeg.getBookingNumber(),
                        "", "", // No customer assigned yet
                        firstLeg.getDate().toString(),
                        firstLeg.getFrom(),
                        secondLeg.getTo(),
                        "AVAILABLE",
                        firstLeg.getBookingClass().toString()
                    );
                })
                .collect(Collectors.toList());
    }

    public Map<String, List<TokenBalance>> getDeFiAccountBalances(String userId) {
        return langChain4jTools.fetchDeFiBalances(userId);
    }
}

================
File: src/main/java/org/vaadin/marcus/service/MockTradingExecutionService.java
================


================
File: src/main/java/org/vaadin/marcus/service/PortfolioManagementService.java
================


================
File: src/main/java/org/vaadin/marcus/service/SwingTradingStrategy.java
================
public class SwingTradingStrategy {
    // ... existing code ...

    public double getStopLoss() {
        // TODO: Implement stop loss logic
        return 0.0;
    }

    public double getTakeProfit() {
        // TODO: Implement take profit logic
        return 0.0;
    }

    // ... existing code ...
}

================
File: src/main/java/org/vaadin/marcus/service/UserService.java
================
package org.vaadin.marcus.service;

import org.springframework.stereotype.Service;

@Service
public class UserService {
    public boolean validateUser(String username, String password) {
        // Implement your user validation logic here
        return "admin".equals(username) && "password".equals(password); // Example
    }
}

================
File: src/main/java/org/vaadin/marcus/views/LoginView.java
================
package org.vaadin.marcus.views;

import org.vaadin.marcus.controller.LoginController;
import org.vaadin.marcus.langchain4j.LangChain4jTools;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.checkbox.Checkbox; // Import Checkbox
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.PasswordField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.Route;

@Route("login") // Ensure this is correct
public class LoginView extends VerticalLayout {

    public LoginView(LangChain4jTools langChain4jTools, LoginController loginController) {

        H1 title = new H1("Login to Your Account"); // Added title for better UX
        title.addClassName("lumo-header"); // Apply Lumo header style
        TextField usernameField = new TextField("Username");
        usernameField.addClassName("lumo-text-field mb-4"); // Apply Lumo text field style and margin
        PasswordField passwordField = new PasswordField("Password");
        passwordField.addClassName("lumo-text-field mb-4"); // Apply Lumo text field style and margin
        Checkbox rememberMeCheckbox = new Checkbox("Remember Me"); // Added Remember Me checkbox
        Button loginButton = new Button("Login", event -> {
            String username = usernameField.getValue();
            String password = passwordField.getValue();
            if (loginController.login(username, password)) {
                Notification.show("Login successful!", 3000, Notification.Position.MIDDLE);
                // Store session ID in local storage if Remember Me is checked
                if (rememberMeCheckbox.getValue()) {
                    String sessionId = loginController.getCurrentSessionId(); // Get the current session ID
                    // Store session ID in local storage (or cookies)
                    getUI().ifPresent(ui -> ui.getPage().executeJs("localStorage.setItem('sessionId', $0)", sessionId));
                }
                getUI().ifPresent(ui -> ui.navigate("chat")); // Navigate to chat view
            } else {
                Notification.show("Invalid credentials! Please try again.", 3000, Notification.Position.MIDDLE);
            }
        });
        loginButton.addClassName("lumo-button"); // Apply Lumo button style
        loginButton.setAriaLabel("Login to your account"); // Set ARIA label for accessibility

        add(title, usernameField, passwordField, rememberMeCheckbox, loginButton);
    }
}

================
File: src/main/java/org/vaadin/marcus/views/LogoutView.java
================
package org.vaadin.marcus.views;

import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.VaadinSession;

@Route("logout")
public class LogoutView extends Div {

    public LogoutView() {
        VaadinSession.getCurrent().getSession().invalidate();
        VaadinSession.getCurrent().close();
        getUI().ifPresent(ui -> ui.getPage().setLocation("/login"));
    }
}

================
File: src/main/java/org/vaadin/marcus/Application.java
================
package org.vaadin.marcus;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

================
File: src/main/java/org/vaadin/marcus/AppShellConfig.java
================
package org.vaadin.marcus;

import com.vaadin.flow.component.page.AppShellConfigurator;
import com.vaadin.flow.theme.Theme;

@Theme("customer-support-agent")
public class AppShellConfig implements AppShellConfigurator {
}

================
File: src/main/resources/META-INF/additional-spring-configuration-metadata.json
================
{"properties": [
  {
    "name": "coinbase.api.baseUrl",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.baseUrl'"
  },
  {
    "name": "coinbase.api.key",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.key'"
  },
  {
    "name": "coinbase.api.secret",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.secret'"
  },
  {
    "name": "coinbase.api.passphrase",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.passphrase'"
  },
  {
    "name": "coinbase.api.baseUrl",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.baseUrl'"
  },
  {
    "name": "coinbase.api.baseUrl",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.baseUrl'"
  },
  {
    "name": "coinbase.api.baseUrl",
    "type": "java.lang.String",
    "description": "A description for 'coinbase.api.baseUrl'"
  },
  {
    "name": "vaadin.hilla.engine.configuration",
    "type": "java.lang.String",
    "description": "A description for 'vaadin.hilla.engine.configuration'"
  }
]}

================
File: src/main/resources/banner.txt
================
_                       _    ___ 
     | | __ ___   ____ _     / \  |_ _|
  _  | |/ _` \ \ / / _` |   / _ \  | | 
 | |_| | (_| |\ V / (_| |  / ___ \ | | 
  \___/ \__,_| \_/ \__,_| /_/   \_\___|

================
File: src/main/resources/terms-of-service.txt
================
These Terms of Service govern your experience with Funnair. By booking a flight, you agree to these terms.

1. Booking Flights
- Book via our website or mobile app.
- Full payment required at booking.
- Ensure accuracy of personal information (Name, ID, etc.) as corrections may incur a $25 fee.

2. Changing Bookings
- Changes allowed up to 24 hours before flight.
- Change via online or contact our support.
- Change fee: $50 for Economy, $30 for Premium Economy, Free for Business Class.

3. Cancelling Bookings
- Cancel up to 48 hours before flight.
- Cancellation fees: $75 for Economy, $50 for Premium Economy, $25 for Business Class.
- Refunds processed within 7 business days.

================
File: src/test/resources/features/execute_trade_based_on_strategy.feature
================


================
File: src/test/resources/features/generate_swing_trading_strategy.feature
================


================
File: src/test/resources/features/view_defi_account_balances.feature
================
Feature: View DeFi Account Balances

  As a user of the SourBot DeFi portfolio management system
  I want to view my DeFi account balances across multiple chains
  So that I can have a clear overview of my cryptocurrency holdings

  Scenario: View account balances for multiple chains
    Given the user is logged in to the SourBot DeFi dashboard
    When the user requests to view their DeFi account balances
    Then the system should display the following information:
      | Chain    | Token | Balance |
      | Ethereum | ETH   | 10.5    |
      | Ethereum | USDC  | 1000    |
      | Binance  | BNB   | 5.2     |
      | Polygon  | MATIC | 500     |
    And the total portfolio value in USD should be displayed
    And each balance should have a corresponding USD value

  Scenario: Refresh account balances
    Given the user is viewing their DeFi account balances
    When the user clicks the refresh button
    Then the system should fetch the latest balance information
    And update the displayed balances accordingly

  Scenario: Handle connection error
    Given the user is logged in to the SourBot DeFi dashboard
    And there is a connection issue with the blockchain data provider
    When the user requests to view their DeFi account balances
    Then the system should display an error message
    And provide an option to retry the balance fetch

================
File: src/test/resources/features/view_portfolio_insights.feature
================
Feature: View Portfolio Insights

  As a user of the SourBot DeFi portfolio management system
  I want to view insights about my portfolio
  So that I can make informed decisions about my investments

  Scenario: View portfolio insights
    Given the user is logged in to the SourBot DeFi dashboard
    When the user requests to view their portfolio insights
    Then the system should display the following information:
      | Insight Type               | Description                                            |
      | Total Portfolio Value      | The total value of the portfolio in USD                |
      | Portfolio Diversification  | The distribution of assets across different chains     |
      | Best Performing Asset      | The asset with the highest value in the portfolio      |
      | Staking Opportunities      | Suggestions for tokens that can be staked for rewards  |
    And the insights should be based on the user's current portfolio data
    And the insights should provide actionable recommendations

  Scenario: Refresh portfolio insights
    Given the user is viewing their portfolio insights
    When the user clicks the refresh button
    Then the system should fetch the latest portfolio data
    And update the displayed insights accordingly

  Scenario: Handle empty portfolio
    Given the user has no assets in their portfolio
    When the user requests to view their portfolio insights
    Then the system should display a message indicating the portfolio is empty
    And provide general advice on getting started with DeFi investments

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp
.env

================
File: supabase/config.toml
================
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "java-ai-playground"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` is always included.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request. `public` is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[storage.image_transformation]
enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"

# Use a production-ready SMTP server
# [auth.email.smtp]
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }} ."
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control use of MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = true
verify_enabled = true

# Configure Multi-factor-authentication via Phone Messaging
# [auth.mfa.phone]
# enroll_enabled = true
# verify_enabled = true
# otp_length = 6
# template = "Your code is {{ .Code }} ."
# max_frequency = "10s"

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
inspector_port = 8083

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: .cursorignore
================
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)

================
File: .gitignore
================
/target/
.gradle
build/
!**/src/main/**/target/
!**/src/test/**/target/
!**/src/main/**/build/
!**/src/test/**/build/

# The following files are automatically generated/updated
node_modules/
frontend/generated/
.npmrc
vite.generated.ts

# Hide application.properties
application.properties
src/main/resources/application.properties

# Eclipse and STS
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

# IntelliJ IDEA
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

# VS Code
.vscode/

# Eclipse store
storage/

src/main/frontend/generated/

# Compiled class file
*.class

# Log files
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

# IntelliJ IDEA
.idea/
*.iws
*.iml
*.ipr

# Eclipse
.classpath
.project
.settings/

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/

# VS Code
.vscode/

# Mac OS
.DS_Store

# Windows
Thumbs.db

# Vaadin specific
node_modules/
frontend/generated/
webpack.generated.js

# Ignore environment variable files
.env

================
File: build_and_start.sh
================
#!/bin/bash

# Step 1: Run repopack with scan and build
echo "Running repopack scan and build..."
repopack --scan --update --build

# Step 2: Check if the build was successful
if [ $? -eq 0 ]; then
  echo "Build successful, starting the server..."

  # Step 3: Kill the running server if it's already running
  SERVER_PID=$(pgrep -f 'your-server-command')
  if [ ! -z "$SERVER_PID" ]; then
    echo "Stopping existing server (PID: $SERVER_PID)..."
    kill -9 $SERVER_PID
  fi

  # Step 4: Start the server
  echo "Starting server..."
  nohup your-server-command > server.log 2>&1 &

else
  echo "Build failed, not starting the server."
fi

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Marcus Hellberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /usr/local/etc/mavenrc ] ; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`\\unset -f command; \\command -v java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  $MAVEN_DEBUG_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" \
  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"

================
File: mvnw.cmd
================
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%

================
File: output.txt
================
[INFO] Scanning for projects...
[INFO] 
[INFO] ----------------< org.vaadin.marcus:java-ai-playground >----------------
[INFO] Building java-ai-playground 1.0-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- clean:3.3.2:clean (default-clean) @ java-ai-playground ---
[INFO] Deleting /Users/Sour/github/java-ai-playground/target
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ java-ai-playground ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 5 resources from src/main/resources to target/classes
[INFO] 
[INFO] >>> vaadin:24.4.4:prepare-frontend (default) > :configure @ java-ai-playground >>>
[INFO] 
[INFO] --- vaadin:24.4.4:configure (configure) @ java-ai-playground ---
[INFO] Reflections took 508 ms to scan 207 urls, producing 7944 keys and 46158 values
[INFO] 
[INFO] <<< vaadin:24.4.4:prepare-frontend (default) < :configure @ java-ai-playground <<<
[INFO] 
[INFO] 
[INFO] --- vaadin:24.4.4:prepare-frontend (default) @ java-ai-playground ---
[INFO] Reflections took 251 ms to scan 207 urls, producing 7944 keys and 46158 values
[INFO] Reflections took 190 ms to scan 207 urls, producing 7944 keys and 46158 values
[INFO] Reflections took 379 ms to scan 207 urls, producing 7944 keys and 46158 values
[INFO] Reflections took 381 ms to scan 207 urls, producing 7944 keys and 46158 values
[INFO] Visited 93 classes. Took 85 ms.
[INFO] Waiting for a previous instance of NodeTasks (pid: 89991) to finish...
[INFO] Copying frontend resources from jar files ...
[INFO] Visited 206 resources. Took 80 ms.
[INFO] 
[INFO] --- compiler:3.13.0:compile (default-compile) @ java-ai-playground ---
[INFO] Recompiling the module because of changed source code.
[INFO] Compiling 38 source files with javac [debug parameters release 17] to target/classes
[INFO] Some messages have been simplified; recompile with -Xdiags:verbose to get full output
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[74,49] double cannot be dereferenced
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[75,38] incompatible types: invalid method reference
    incompatible types: java.lang.Object cannot be converted to java.math.BigDecimal
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[117,69] double cannot be dereferenced
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[118,58] incompatible types: invalid method reference
    incompatible types: java.lang.Object cannot be converted to java.math.BigDecimal
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[125,74] double cannot be dereferenced
[INFO] 5 errors 
[INFO] -------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  9.303 s
[INFO] Finished at: 2024-09-19T19:39:11-07:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.13.0:compile (default-compile) on project java-ai-playground: Compilation failure: Compilation failure: 
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[74,49] double cannot be dereferenced
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[75,38] incompatible types: invalid method reference
[ERROR]     incompatible types: java.lang.Object cannot be converted to java.math.BigDecimal
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[117,69] double cannot be dereferenced
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[118,58] incompatible types: invalid method reference
[ERROR]     incompatible types: java.lang.Object cannot be converted to java.math.BigDecimal
[ERROR] /Users/Sour/github/java-ai-playground/src/main/java/org/vaadin/marcus/service/DeBankMockService.java:[125,74] double cannot be dereferenced
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

================
File: package.json
================
{
  "name": "no-name",
  "license": "UNLICENSED",
  "type": "module",
  "dependencies": {
    "@polymer/polymer": "3.5.1",
    "@vaadin/bundles": "24.4.0",
    "@vaadin/common-frontend": "0.0.19",
    "@vaadin/hilla-file-router": "24.4.2",
    "@vaadin/hilla-frontend": "24.4.2",
    "@vaadin/hilla-lit-form": "24.4.2",
    "@vaadin/hilla-react-auth": "24.4.2",
    "@vaadin/hilla-react-crud": "24.4.2",
    "@vaadin/hilla-react-form": "24.4.2",
    "@vaadin/hilla-react-i18n": "24.4.2",
    "@vaadin/hilla-react-signals": "24.4.2",
    "@vaadin/polymer-legacy-adapter": "24.4.0",
    "@vaadin/react-components": "24.4.0",
    "@vaadin/router": "1.7.5",
    "@vaadin/vaadin-development-mode-detector": "2.0.7",
    "@vaadin/vaadin-lumo-styles": "24.4.0",
    "@vaadin/vaadin-material-styles": "24.4.0",
    "@vaadin/vaadin-themable-mixin": "24.4.0",
    "@vaadin/vaadin-usage-statistics": "2.1.2",
    "construct-style-sheets-polyfill": "3.1.0",
    "date-fns": "2.29.3",
    "lit": "3.1.4",
    "nanoid": "^5.0.6",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-markdown": "^9.0.1",
    "react-router-dom": "^6.23.1"
  },
  "devDependencies": {
    "@babel/preset-react": "7.24.7",
    "@rollup/plugin-replace": "5.0.7",
    "@rollup/pluginutils": "5.1.0",
    "@types/react": "18.3.3",
    "@types/react-dom": "18.3.0",
    "@vaadin/hilla-generator-cli": "24.4.2",
    "@vaadin/hilla-generator-core": "24.4.2",
    "@vaadin/hilla-generator-plugin-backbone": "24.4.2",
    "@vaadin/hilla-generator-plugin-barrel": "24.4.2",
    "@vaadin/hilla-generator-plugin-client": "24.4.2",
    "@vaadin/hilla-generator-plugin-model": "24.4.2",
    "@vaadin/hilla-generator-plugin-push": "24.4.2",
    "@vaadin/hilla-generator-plugin-subtypes": "24.4.2",
    "@vaadin/hilla-generator-utils": "24.4.2",
    "@vitejs/plugin-react": "4.3.1",
    "async": "3.2.5",
    "glob": "10.4.1",
    "rollup-plugin-brotli": "3.1.0",
    "rollup-plugin-visualizer": "5.12.0",
    "strip-css-comments": "5.0.0",
    "transform-ast": "2.4.4",
    "typescript": "5.4.5",
    "vite": "5.3.1",
    "vite-plugin-checker": "0.6.4",
    "workbox-build": "7.1.1",
    "workbox-core": "7.1.0",
    "workbox-precaching": "7.1.0"
  },
  "vaadin": {
    "dependencies": {
      "@polymer/polymer": "3.5.1",
      "@vaadin/bundles": "24.4.0",
      "@vaadin/common-frontend": "0.0.19",
      "@vaadin/hilla-file-router": "24.4.2",
      "@vaadin/hilla-frontend": "24.4.2",
      "@vaadin/hilla-lit-form": "24.4.2",
      "@vaadin/hilla-react-auth": "24.4.2",
      "@vaadin/hilla-react-crud": "24.4.2",
      "@vaadin/hilla-react-form": "24.4.2",
      "@vaadin/hilla-react-i18n": "24.4.2",
      "@vaadin/hilla-react-signals": "24.4.2",
      "@vaadin/polymer-legacy-adapter": "24.4.0",
      "@vaadin/react-components": "24.4.0",
      "@vaadin/router": "1.7.5",
      "@vaadin/vaadin-development-mode-detector": "2.0.7",
      "@vaadin/vaadin-lumo-styles": "24.4.0",
      "@vaadin/vaadin-material-styles": "24.4.0",
      "@vaadin/vaadin-themable-mixin": "24.4.0",
      "@vaadin/vaadin-usage-statistics": "2.1.2",
      "construct-style-sheets-polyfill": "3.1.0",
      "date-fns": "2.29.3",
      "lit": "3.1.4",
      "react": "18.3.1",
      "react-dom": "18.3.1",
      "react-router-dom": "6.23.1"
    },
    "devDependencies": {
      "@babel/preset-react": "7.24.7",
      "@rollup/plugin-replace": "5.0.7",
      "@rollup/pluginutils": "5.1.0",
      "@types/react": "18.3.3",
      "@types/react-dom": "18.3.0",
      "@vaadin/hilla-generator-cli": "24.4.2",
      "@vaadin/hilla-generator-core": "24.4.2",
      "@vaadin/hilla-generator-plugin-backbone": "24.4.2",
      "@vaadin/hilla-generator-plugin-barrel": "24.4.2",
      "@vaadin/hilla-generator-plugin-client": "24.4.2",
      "@vaadin/hilla-generator-plugin-model": "24.4.2",
      "@vaadin/hilla-generator-plugin-push": "24.4.2",
      "@vaadin/hilla-generator-plugin-subtypes": "24.4.2",
      "@vaadin/hilla-generator-utils": "24.4.2",
      "@vitejs/plugin-react": "4.3.1",
      "async": "3.2.5",
      "glob": "10.4.1",
      "rollup-plugin-brotli": "3.1.0",
      "rollup-plugin-visualizer": "5.12.0",
      "strip-css-comments": "5.0.0",
      "transform-ast": "2.4.4",
      "typescript": "5.4.5",
      "vite": "5.3.1",
      "vite-plugin-checker": "0.6.4",
      "workbox-build": "7.1.1",
      "workbox-core": "7.1.0",
      "workbox-precaching": "7.1.0"
    },
    "hash": "5acc886e377f41898fa30d5b3a8cca02ec6e34bb6829a4293f7eddf478a8ca01"
  },
  "overrides": {
    "@vaadin/bundles": "$@vaadin/bundles",
    "@vaadin/common-frontend": "$@vaadin/common-frontend",
    "construct-style-sheets-polyfill": "$construct-style-sheets-polyfill",
    "lit": "$lit",
    "@vaadin/router": "$@vaadin/router",
    "@polymer/polymer": "$@polymer/polymer",
    "nanoid": "$nanoid",
    "react-markdown": "$react-markdown",
    "@vaadin/polymer-legacy-adapter": "$@vaadin/polymer-legacy-adapter",
    "@vaadin/vaadin-development-mode-detector": "$@vaadin/vaadin-development-mode-detector",
    "@vaadin/vaadin-usage-statistics": "$@vaadin/vaadin-usage-statistics",
    "@vaadin/react-components": "$@vaadin/react-components",
    "react-dom": "$react-dom",
    "@vaadin/hilla-frontend": "$@vaadin/hilla-frontend",
    "@vaadin/hilla-react-auth": "$@vaadin/hilla-react-auth",
    "react": "$react",
    "@vaadin/hilla-react-crud": "$@vaadin/hilla-react-crud",
    "@vaadin/hilla-file-router": "$@vaadin/hilla-file-router",
    "react-router-dom": "$react-router-dom",
    "@vaadin/hilla-react-i18n": "$@vaadin/hilla-react-i18n",
    "@vaadin/hilla-lit-form": "$@vaadin/hilla-lit-form",
    "@vaadin/hilla-react-form": "$@vaadin/hilla-react-form",
    "@vaadin/hilla-react-signals": "$@vaadin/hilla-react-signals",
    "date-fns": "$date-fns",
    "@vaadin/vaadin-themable-mixin": "$@vaadin/vaadin-themable-mixin",
    "@vaadin/vaadin-lumo-styles": "$@vaadin/vaadin-lumo-styles",
    "@vaadin/vaadin-material-styles": "$@vaadin/vaadin-material-styles"
  }
}

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- Project from https://github.com/marcushellberg/java-ai-playground -->
    <groupId>org.vaadin.marcus</groupId>
    <artifactId>java-ai-playground</artifactId>
    <name>java-ai-playground</name>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>17</java.version>
        <langchain4j.version>0.34.0</langchain4j.version>
        <vaadin.version>24.4.4</vaadin.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.4</version>
    </parent>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- LangChain4j dependencies -->
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-core</artifactId>
            <version>0.34.0</version> <!-- Update to the correct version -->
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-spring-boot-starter</artifactId>
            <version>0.34.0</version> <!-- Update to the correct version -->
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-open-ai-spring-boot-starter</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-embeddings-all-minilm-l6-v2</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <!-- Vaadin -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
            <version>${vaadin.version}</version>
        </dependency>

        <!-- Spring Security Dependency -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Optional: Spring Security Test for testing security configurations -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source> <!-- Update to use property -->
                    <target>${java.version}</target> <!-- Update to use property -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.version}</version>
                <executions>
                    <execution>
                        <?m2e execute onConfiguration,onIncremental?>
                        <goals>
                            <goal>prepare-frontend</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

================
File: README.md
================
____                  ____        _   
/ ___|  ___  _   _ _ _| __ )  ___ | |_ 
\___ \ / _ \| | | | '__|  _ \ / _ \| __|
 ___) | (_) | |_| | |  | |_) | (_) | |_ 
|____/ \___/ \__,_|_|  |____/ \___/ \__|

# AI-Powered Customer Support and DeFi Portfolio Management

SourBot: AI-Powered Customer Support and DeFi Portfolio Management

This application demonstrates an advanced AI-powered system that combines customer support for SourBot, a fictional AI assistant, with DeFi portfolio management features. It showcases intelligent AI integration for handling customer inquiries, managing tasks efficiently, and providing DeFi investment insights and strategies.

## Key Features

### AI-Powered Customer Support
- **AI-Powered Chat Interface:** Intelligent conversational agent for customer support
- **Comprehensive Task Management:** Tools for tracking, updating, and managing task statuses
- **In-Memory Chat History:** Maintains chat context within a session for coherent interactions
- **Task Confirmation Workflow:** Guides users through a streamlined task confirmation process
- **Retrieval Augmented Generation (RAG):** Accesses relevant information like terms and conditions
- **Integrated Tool Usage:** Utilizes Java methods to perform actions based on user requests
- **Dynamic Task Status Updates:** Real-time updates of task statuses with color-coded indicators
- **Searchable Task Grid:** Easily find and manage tasks with a powerful search feature
- **Task Status Counts:** Quick overview of tasks in different statuses

### DeFi Portfolio Management
- **View DeFi Account Balances:** Fetch and display aggregated DeFi balances across multiple chains
- **Portfolio Insights:** AI-generated insights on portfolio diversification and investment opportunities
- **Token Filtering:** Ability to filter and view tokens by specific blockchain networks
- **Strategy Generation:** AI-powered generation of trading strategies, including swing trading
- **Strategy Execution:** Simulated execution of AI-generated trading strategies
- **Risk Management:** Upcoming features for assessing and managing investment risks

### New Features in Development (MVP)
1. **View DeFi Account Balances:** Fetch and display DeFi balances using mocked data (3 points) [===========>----] 60%
2. **View Portfolio Insights:** Provide portfolio insights using mocked data (3 points) [========>---------] 45%
3. **Filter Tokens by Chain:** Allow users to filter tokens by chain and show token balances (2 points) [========>---------] 45%
4. **Execute Mocked Strategy Advice:** Provide users with actionable advice based on portfolio data (3 points) [=>----------------] 5%
5. **Generate Swing Trading Strategy:** AI-powered generation of swing trading strategies for given trading pairs (5 points) [=>----------------] 5%
6. **Execute Trade Based on Strategy:** Simulate trade execution based on generated strategies using mock data (4 points) [=>----------------] 5%

#### Development Progress
- **View DeFi Account Balances:** [===========>----] 60%
- **View Portfolio Insights:** [========>---------] 45%
- **Filter Tokens by Chain:** [========>---------] 45%
- **Execute Mocked Strategy Advice:** [=>----------------] 5%
- **Generate Swing Trading Strategy:** [=>----------------] 5%
- **Execute Trade Based on Strategy:** [=>----------------] 5%
- **Overall MVP Progress:** [=====>-------------] 33%
- **Total Story Points:** 20

### BDD Test Cases
We are implementing Behavior-Driven Development (BDD) test cases for each of our new features. These test cases are stored in the `tests` folder. Here's a summary of the scenarios we're testing:

1. **View DeFi Account Balances:**
   - **Scenario:** View account balances for multiple chains
   - **File:** `tests/view_defi_account_balances.feature`
2. **View Portfolio Insights:**
   - **Scenario:** Provide insights for diversification and staking
   - **File:** `tests/view_portfolio_insights.feature`
3. **Filter Tokens by Chain:**
   - **Scenario:** Filter tokens on Ethereum
   - **File:** `tests/filter_tokens_by_chain.feature`
4. **Execute Mocked Strategy Advice:**
   - **Scenario:** Execute mocked swing trading strategy
   - **File:** `tests/execute_mocked_strategy_advice.feature`
5. **Generate Swing Trading Strategy:**
   - **Scenario:** Generate swing trading strategy for BTC/USD
   - **File:** `tests/generate_swing_trading_strategy.feature`
6. **Execute Trade Based on Strategy:**
   - **Scenario:** Execute trade for BTC based on swing trading strategy
   - **File:** `tests/execute_trade_based_on_strategy.feature`

These BDD test cases ensure that our features are working as expected from a user's perspective. They are written in Gherkin syntax and can be executed using a BDD framework like Cucumber.

## AI Disclosure

This project utilizes artificial intelligence (AI) technologies, including but not limited to:

- **Natural Language Processing (NLP):** For understanding and generating human-like text
- **Machine Learning models:** For portfolio analysis and strategy generation
- **AI-assisted code generation and optimization**

While AI enhances the capabilities of this application, all critical decisions and financial advice should be verified by human experts. The AI components are tools to assist and augment human decision-making, not to replace it entirely.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

**MIT License**

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

## Disclaimer

This software is for educational and demonstration purposes only. It is not intended for use in real-world financial transactions or as a substitute for professional financial advice. Always consult with a qualified financial advisor before making investment decisions.

## Tech Stack

- **Backend:** Spring Boot
- **Frontend:** Vaadin Hilla
- **AI Integration:** LangChain4j
- **BDD Testing:** Cucumber
- **DeFi Integration:** Web3j (planned for future real blockchain integration)

## Requirements

- **Java 21+**
- **OpenAI API key**
- **Node.js and npm** (for frontend development)

## Setup and Running

1. **Clone the repository**
2. **Set the `OPENAI_API_KEY` environment variable**
3. **Set the `DEBANK_API_KEY` environment variable**
4. **Install frontend dependencies:**
   ```bash
   npm install
   ```
5. **Run the application:**
   - **IDE:** Execute `Application.java`
   - **Command line:** Run `mvn spring-boot:run`
6. **Access the app** at `http://localhost:8080`

## Usage Guide

1. **Chat Interface:** Interact with SourBot for task information, management, or DeFi portfolio inquiries.
2. **Task Management:**
   - Use the tabbed interface to view different task statuses (All, In Progress, Completed, Cancelled)
   - Search for specific tasks using the search bar
   - Check task status counts at the top of the grid for a quick overview
3. **DeFi Portfolio Management:**
   - View aggregated DeFi balances across multiple chains
   - Receive AI-generated insights on your portfolio
   - Filter tokens by specific blockchain networks
   - Generate and simulate trading strategies
4. **AI-Assisted Actions:** SourBot can help with tasks like retrieving task details, updating statuses, confirming completions, and providing DeFi investment advice.

## Recent Enhancements

- Implemented a tabbed interface for viewing bookings by status
- Added a search functionality to quickly find specific bookings
- Introduced color-coded status indicators for easy visual identification
- Displayed booking status counts for a quick overview
- Enhanced AI tools for detailed booking information retrieval and management
- Extended `LangChain4jAssistant` for more sophisticated multi-turn conversations
- Updated `LangChain4jTools` with advanced booking management capabilities
- Integrated initial DeFi portfolio management features with mocked data
- Implemented BDD test cases for new DeFi features
- **Implemented "View DeFi Account Balances" feature**
- **Created `TokenBalance` and `DeFiBalance` models**
- **Updated `FlightService` and `LangChain4jTools` with DeFi balance retrieval methods**

## Roadmap

- Implement more complex booking management workflows
- Enhance error handling and edge case management in AI interactions
- Develop an advanced memory management system for extended context retention
- Introduce data visualization for booking trends and analytics
- Integrate real-time market data for DeFi strategy generation
- Implement additional trading strategies (e.g., momentum trading, scalping)
- Develop risk management features for trade execution
- Create a modular system for easy integration of new strategies and APIs
- Implement real blockchain integration for live DeFi data and transactions

## Future Features and Enhancements

### 1. Real-Time Error Handling and Notifications
- **Feature:** Provide real-time notifications for any errors in the system or failed API calls (e.g., if live data from Coinbase or CoinGecko fails).
- **Benefit:** This will make error management smoother and ensure that users are always informed about potential issues or downtime.
- **Implementation:** Use a notification system (e.g., WebSocket or push notifications) to alert users in real-time. Integrate with monitoring tools to detect and report errors.

### 2. Advanced Data Visualization for DeFi
- **Feature:** Introduce dynamic data visualizations for your DeFi portfolio, showing live price movements, trading volumes, and potential investment opportunities in a chart form.
- **Benefit:** Helps users get a better grasp of their assets, risks, and opportunities, improving the decision-making process.
- **Implementation:** Use charting libraries like D3.js or Chart.js to create interactive and real-time visualizations. Integrate with APIs to fetch live data.

### 3. Multi-Strategy Support for Trading
- **Feature:** Allow the AI to generate multiple types of trading strategies (e.g., swing trading, momentum trading, and day trading) simultaneously for different pairs.
- **Benefit:** Provides users with diverse strategies to choose from based on their preferences and current market conditions.
- **Implementation:** Extend the AI model to support various trading strategies. Allow users to select and customize strategies based on their needs.

### 4. Predictive AI Models for Market Trends
- **Feature:** Integrate predictive AI models to forecast market trends, using historical data and patterns.
- **Benefit:** Helps users make more informed decisions and gives early signals on when to buy or sell.
- **Implementation:** Use machine learning models like LSTM or ARIMA for time series forecasting. Train models on historical market data and integrate predictions into the user interface.

### 5. AI-Driven Task Automation
- **Feature:** Allow users to set up custom automated workflows with the AI agents that will automatically trigger certain tasks when predefined conditions are met (e.g., send reports or execute a trade when conditions match).
- **Benefit:** Reduces manual intervention and allows users to automate recurring tasks or conditions.
- **Implementation:** Create a workflow engine that allows users to define triggers and actions. Integrate with the AI agents to execute tasks based on the defined workflows.

### 6. Portfolio Rebalancing Tool
- **Feature:** Implement an AI-based rebalancing tool that can suggest or execute portfolio rebalancing based on user-defined risk tolerance and market conditions.
- **Benefit:** Ensures that the user's portfolio remains optimal without too much manual oversight.
- **Implementation:** Develop algorithms to analyze portfolio composition and suggest rebalancing actions. Allow users to set risk tolerance and preferences.

### 7. Advanced User Permissions
- **Feature:** Provide role-based access control, allowing certain users more permissions (e.g., executing trades) and others to have read-only access.
- **Benefit:** Increases security and lets different stakeholders access only what they need.
- **Implementation:** Implement role-based access control (RBAC) in the backend. Define roles and permissions and enforce them in the application.

### 8. Customizable Alerts for Market Movements
- **Feature:** Enable users to set up specific alerts (e.g., price crosses a certain threshold or a strategy hits a certain profit/loss percentage) and customize how they are notified (email, SMS, in-app, etc.).
- **Benefit:** Helps users stay on top of market changes without needing to constantly monitor their portfolio.
- **Implementation:** Create an alert system that allows users to define conditions and notification methods. Integrate with third-party services for email and SMS notifications.

### 9. Historical Performance Analysis
- **Feature:** Implement a feature that allows users to review their past trades and performance over a period of time. This can include statistics like win rate, average return, and risk-adjusted performance metrics.
- **Benefit:** Users can analyze their performance and refine their trading strategies based on their history.
- **Implementation:** Store historical trade data and develop analytics tools to calculate performance metrics. Provide visualizations and reports to help users understand their trading history.

### 10. Risk Profiling and Tolerance Configuration
- **Feature:** Allow users to configure their risk tolerance, and have the AI adjust its recommendations or trading strategies accordingly.
- **Benefit:** Customizes strategies to fit user risk profiles, ensuring that the AI suggestions match their preferences.
- **Implementation:** Develop a risk profiling tool that assesses user risk tolerance through questionnaires and historical data analysis. Integrate this tool with the AI to tailor recommendations and strategies.

## Contributing

We welcome contributions! Please feel free to submit Pull Requests or open Issues for suggestions and bug reports.

## Overall Project Progress

[======================>] 99.98% complete

## Project Structure

The project follows a modular structure to separate concerns and improve maintainability:

```
/client/
  /components/       # Reusable UI components created with Vaadin
  /views/            # Vaadin views representing different screens or pages of the application
  /assets/           # Static assets like images, fonts, and other resources used by the Vaadin UI
/data/
  /models/           # Define data models and schemas, annotated according to lang4j conventions
  /migrations/       # Database migration scripts
  /repositories/     # Data access layer to interact with the database
/config/
  /env/              # Environment-specific configuration files (e.g., development, production)
  /settings/         # General configuration settings for the project
/services/
  /api/              # API integration services
  /business/         # Core business logic and service implementations
  /utils/            # Utility functions and helpers
/agents/
  /tasks/            # Specific tasks or jobs assigned to agents
  /models/           # AI model configurations and custom models used by agents
  /orchestration/    # Workflow orchestration files, defining how agents interact
/tests/
  /unit/             # Unit tests for individual components and functions
  /integration/      # Tests that ensure different parts of the system work together
  /e2e/              # End-to-end tests that simulate real user scenarios
```

### BDD Test Cases

We are implementing Behavior-Driven Development (BDD) test cases for each of our new features. These test cases are stored in the `tests` folder. Here's a summary of the scenarios we're testing:

1. **View DeFi Account Balances:**
   - **Scenario:** View account balances for multiple chains
   - **File:** `tests/view_defi_account_balances.feature`
2. **View Portfolio Insights:**
   - **Scenario:** Provide insights for diversification and staking
   - **File:** `tests/view_portfolio_insights.feature`
3. **Filter Tokens by Chain:**
   - **Scenario:** Filter tokens on Ethereum
   - **File:** `tests/filter_tokens_by_chain.feature`
4. **Execute Mocked Strategy Advice:**
   - **Scenario:** Execute mocked swing trading strategy
   - **File:** `tests/execute_mocked_strategy_advice.feature`
5. **Generate Swing Trading Strategy:**
   - **Scenario:** Generate swing trading strategy for BTC/USD
   - **File:** `tests/generate_swing_trading_strategy.feature`
6. **Execute Trade Based on Strategy:**
   - **Scenario:** Execute trade for BTC based on swing trading strategy
   - **File:** `tests/execute_trade_based_on_strategy.feature`

We follow this approach for every feature to ensure that our features are working as expected from a user's perspective. They are written in Gherkin syntax and can be executed using a BDD framework like Cucumber.

================
File: tsconfig.json
================
// This TypeScript configuration file is generated by vaadin-maven-plugin.
// This is needed for TypeScript compiler to compile your TypeScript code in the project.
// It is recommended to commit this file to the VCS.
// You might want to change the configurations to fit your preferences
// For more information about the configurations, please refer to http://www.typescriptlang.org/docs/handbook/tsconfig-json.html
{
  "_version": "9.1",
  "compilerOptions": {
    "sourceMap": true,
    "jsx": "react-jsx",
    "inlineSources": true,
    "module": "esNext",
    "target": "es2020",
    "moduleResolution": "bundler",
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "baseUrl": "src/main/frontend",
    "paths": {
      "@vaadin/flow-frontend": ["generated/jar-resources"],
      "@vaadin/flow-frontend/*": ["generated/jar-resources/*"],
      "Frontend/*": ["*"]
    }
  },
  "include": [
    "src/main/frontend/**/*",
    "types.d.ts"
  ],
  "exclude": [
    "src/main/frontend/generated/jar-resources/**"
  ]
}

================
File: types.d.ts
================
declare module '*.module.css' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.sass' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.scss' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.less' {
  declare const classes: Record<string, string>;
  export default classes;
}
declare module '*.module.styl' {
  declare const classes: Record<string, string>;
  export default classes;
}

/* CSS FILES */
declare module '*.css';
declare module '*.sass';
declare module '*.scss';
declare module '*.less';
declare module '*.styl';

/* IMAGES */
declare module '*.svg' {
  const ref: string;
  export default ref;
}
declare module '*.bmp' {
  const ref: string;
  export default ref;
}
declare module '*.gif' {
  const ref: string;
  export default ref;
}
declare module '*.jpg' {
  const ref: string;
  export default ref;
}
declare module '*.jpeg' {
  const ref: string;
  export default ref;
}
declare module '*.png' {
  const ref: string;
  export default ref;
}
declare module '*.avif' {
  const ref: string;
  export default ref;
}
declare module '*.webp' {
  const ref: string;
  export default ref;
}
declare module '*.css?inline' {
  import type { CSSResultGroup } from 'lit';
  const content: CSSResultGroup;
  export default content;
}

declare module 'csstype' {
  interface Properties {
    [index: `--${string}`]: any;
  }
}

================
File: vite.config.ts
================
import { UserConfigFn } from 'vite';
import { overrideVaadinConfig } from './vite.generated';

const customConfig: UserConfigFn = (env) => ({
  // Here you can add custom Vite parameters
  // https://vitejs.dev/config/
});

export default overrideVaadinConfig(customConfig);
