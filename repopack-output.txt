This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-15T20:18:41.573Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.mvn/
  wrapper/
    maven-wrapper.properties
    MavenWrapperDownloader.java
src/
  main/
    frontend/
      components/
        ClientManagementModal.tsx
        CustomButton.tsx
        Message.tsx
        MessageList.tsx
        Pagination.tsx
      themes/
        customer-support-agent/
          theme.json
      types/
        BookingDetails.d.ts
      views/
        @index.tsx
      index.html
    java/
      org/
        vaadin/
          marcus/
            client/
              AssistantService.java
              BookingService.java
              package-info.java
            data/
              Booking.java
              BookingClass.java
              BookingData.java
              BookingStatus.java
              Customer.java
              package-info.java
            langchain4j/
              LangChain4jAssistant.java
              LangChain4jConfig.java
              LangChain4jTools.java
            service/
              Booking.java
              BookingDetails.java
              ClientProfile.java
              ClientService.java
              FlightService.java
              Interaction.java
              SegmentationCriteria.java
            views/
              BookingView.java
              ChatView.java
              ClientManagementView.java
              ClientProfileDialog.java
              MainLayout.java
            Application.java
    resources/
      banner.txt
      terms-of-service.txt
.gitignore
LICENSE
mvnw
mvnw.cmd
package.json
pom.xml
README.md
tsconfig.json
types.d.ts
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar

================
File: .mvn/wrapper/MavenWrapperDownloader.java
================
/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.io.*;
import java.net.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is
     * provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
            + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl
     * property to use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH = ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH = ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download
     * url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a
        // custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if (mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if (mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if (!outputFile.getParentFile().exists()) {
            if (!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

================
File: src/main/frontend/components/ClientManagementModal.tsx
================
import { useState, useEffect } from 'react';
import { Dialog } from '@vaadin/react-components/Dialog.js';
import { Button } from '@vaadin/react-components/Button.js';
import { TextField } from '@vaadin/react-components/TextField.js';
import { Grid } from '@vaadin/react-components/Grid.js';
import { GridColumn } from '@vaadin/react-components/GridColumn.js';
import { BookingService } from 'Frontend/generated/endpoints';
import { ClientProfile } from 'Frontend/generated/org/vaadin/marcus/service/ClientProfile';

interface ClientManagementModalProps {
  open: boolean;
  onClose: () => void;
}

export default function ClientManagementModal({ open, onClose }: ClientManagementModalProps) {
  const [clients, setClients] = useState<ClientProfile[]>([]);
  const [newClient, setNewClient] = useState<Partial<ClientProfile>>({});

  useEffect(() => {
    if (open) {
      fetchClients();
    }
  }, [open]);

  const fetchClients = async () => {
    // In a real application, you would fetch clients from the server
    // For now, we'll use dummy data
    const dummyClients: ClientProfile[] = [
      { id: '1', firstName: 'John', lastName: 'Doe', email: 'john@example.com' },
      { id: '2', firstName: 'Jane', lastName: 'Smith', email: 'jane@example.com' },
    ];
    setClients(dummyClients);
  };

  // Remove the handleAddClient function
  const handleAddClient = async () => {
    try {
      const addedClient = await BookingService.addNewClient(newClient as ClientProfile);
      setClients([...clients, addedClient]);
      setNewClient({});
    } catch (error) {
      console.error('Failed to add new client:', error);
    }
  };

  return (
    <Dialog opened={open} onOpenedChanged={(e) => !e.detail.value && onClose()} header="Client Management">
      <div className="p-4">
        <h3 className="text-lg font-semibold mb-4">Client List</h3>
        <Grid items={clients}>
          <GridColumn path="firstName" header="First Name" />
          <GridColumn path="lastName" header="Last Name" />
          <GridColumn path="email" header="Email" />
        </Grid>
      </div>
    </Dialog>
  );
}

================
File: src/main/frontend/components/CustomButton.tsx
================
import React from 'react';
import { Button } from "@vaadin/react-components/Button";

interface CustomButtonProps {
  onClick?: () => void;
  className?: string;
  children: React.ReactNode;
  disabled?: boolean;
}

const CustomButton: React.FC<CustomButtonProps> = ({ onClick, className, children, disabled }) => {
  return (
    <Button
      onClick={onClick}
      className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded ${className}`}
      disabled={disabled}
    >
      {children}
    </Button>
  );
};

export default CustomButton;

================
File: src/main/frontend/components/Message.tsx
================
import Markdown from "react-markdown";

export interface MessageItem {
  role: 'user' | 'assistant';
  content: string;
}

interface MessageProps {
  message: MessageItem;
}

export default function Message({message}: MessageProps) {
  return (
    <div className="mb-l">
      <div className="font-bold">{message.role === 'user' ? '🧑‍💻 You' : '🤖 Assistant'}</div>
      <div>
        <Markdown>
          {message.content}
        </Markdown>
      </div>
    </div>
  )
};

================
File: src/main/frontend/components/MessageList.tsx
================
import React, { useRef, useEffect } from 'react';
import Message, {MessageItem} from './Message';

interface MessageListProps {
  messages: MessageItem[];
  className?: string;
}

export default function MessageList({ messages, className }: MessageListProps) {
  const endOfMessagesRef = useRef<HTMLDivElement>(null);

  // Automatically scroll down whenever the messages change
  useEffect(() => {
    if (endOfMessagesRef.current) {
      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  return (
    <div className={className}>
      {messages.map((msg, index) => (
        <Message key={index} message={msg} />
      ))}
      <div ref={endOfMessagesRef} />
    </div>
  );
}

================
File: src/main/frontend/components/Pagination.tsx
================
import React from 'react';
import CustomButton from './CustomButton';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {
  return (
    <div className="flex justify-center items-center mt-4 space-x-2">
      <CustomButton
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="px-2 py-1 text-sm"
      >
        Previous
      </CustomButton>
      <span className="text-gray-700">
        Page {currentPage} of {totalPages}
      </span>
      <CustomButton
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="px-2 py-1 text-sm"
      >
        Next
      </CustomButton>
    </div>
  );
};

export default Pagination;

================
File: src/main/frontend/themes/customer-support-agent/theme.json
================
{
  "lumoImports" : [ "typography", "color", "spacing", "badge", "utility" ]
}

================
File: src/main/frontend/types/BookingDetails.d.ts
================
declare module "../generated/org/vaadin/marcus/service/BookingDetails" {
    export interface BookingDetails {
        bookingNumber: string;
        firstName: string;
        lastName: string;
        date: string;
        from: string;
        to: string;
        bookingStatus: string;
        bookingClass: string;
    }

    export default BookingDetails;
}

================
File: src/main/frontend/views/@index.tsx
================
import { useEffect, useState } from "react";
import { nanoid } from "nanoid";
import { Tooltip } from "@vaadin/react-components/Tooltip.js";

// Vaadin components
import { 
  Button, 
  Grid, 
  GridColumn, 
  MessageInput, 
  Notification, 
  SplitLayout, 
  TextField,
  ProgressBar // Use ProgressBar instead of CircularProgress
} from "@vaadin/react-components";

// Remove this line
// import { CircularProgress } from "@vaadin/react-components/CircularProgress.js";

// Local imports
import { AssistantService, BookingService } from "../generated/endpoints";
import BookingDetails from "../generated/org/vaadin/marcus/service/BookingDetails";
import Message, { MessageItem } from "../components/Message";
import MessageList from "Frontend/components/MessageList";
import CustomButton from "../components/CustomButton";
import ClientManagementModal from "../components/ClientManagementModal";

const statusIcons: { [key: string]: string } = {
  CONFIRMED: "✅",
  COMPLETED: "🏁",
  CANCELLED: "❌",
  AWAITING_CONFIRMATION: "⏳",
  AVAILABLE: "🟢"
};

export default function Index() {
  const [chatId] = useState(nanoid());
  const [working, setWorking] = useState(false);
  const [bookings, setBookings] = useState<BookingDetails[]>([]);
  const [messages, setMessages] = useState<MessageItem[]>([{
    role: 'assistant',
    content: 'Welcome to Funnair! How can I help you?'
  }]);
  const [showConfirmed, setShowConfirmed] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [errorNotification, setErrorNotification] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [visibleBookings, setVisibleBookings] = useState(10);
  const [clientManagementOpen, setClientManagementOpen] = useState(false);

  const filteredBookings = bookings.filter(booking => 
    (booking.bookingNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) ||
    (booking.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) ||
    (booking.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false)
  );

  useEffect(() => {
    setIsLoading(true);
    setError(null);
    // Generate mock data with 50 records
    const mockBookings: BookingDetails[] = Array.from({ length: 50 }, (_, i) => {
      const statuses = ["CONFIRMED", "COMPLETED", "CANCELLED", "AWAITING_CONFIRMATION", "AVAILABLE"];
      const cities = ["New York", "London", "Paris", "Tokyo", "Sydney", "Los Angeles", "Chicago", "Berlin", "Moscow", "Beijing", "Dubai", "Rome", "Amsterdam", "Singapore", "Toronto"];
      const classes = ["Economy", "Business", "First"];
      const randomDate = () => {
        const start = new Date(2024, 0, 1);
        const end = new Date(2024, 11, 31);
        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toISOString().split('T')[0];
      };
      const randomCity = () => cities[Math.floor(Math.random() * cities.length)];
      return {
        bookingNumber: `B${(i + 1).toString().padStart(3, '0')}`,
        firstName: `FirstName${i + 1}`,
        lastName: `LastName${i + 1}`,
        date: randomDate(),
        from: randomCity(),
        to: randomCity(),
        bookingStatus: statuses[Math.floor(Math.random() * statuses.length)],
        bookingClass: classes[Math.floor(Math.random() * classes.length)]
      };
    });
    
    setTimeout(() => {
      setBookings(mockBookings);
      setIsLoading(false);
    }, 1000); // Simulate network delay
  }, []);

  const addMessage = (message: MessageItem) => {
    setMessages(messages => [...messages, message]);
  };

  const appendToLatestMessage = (chunk: string) => {
    setMessages(messages => {
      const latestMessage = messages[messages.length - 1];
      latestMessage.content += chunk;
      return [...messages.slice(0, -1), latestMessage];
    });
  };

  const sendMessage = async (message: string) => {
    setWorking(true);
    addMessage({ role: 'user', content: message });
    let first = true;
    AssistantService.chat(chatId, message)
      .onNext((token: string) => {
        if (first && token) {
          addMessage({ role: 'assistant', content: token });
          first = false;
        } else {
          appendToLatestMessage(token);
        }
      })
      .onError(() => {
        setErrorNotification("Failed to send message. Please try again.");
        setWorking(false);
      })
      .onComplete(() => setWorking(false));
  };

  const renderStatus = (booking: BookingDetails) => {
    const status = booking.bookingStatus;
    return statusIcons[status as keyof typeof statusIcons] || status;
  };

  const awaitingConfirmationBookings = filteredBookings.filter(booking => booking.bookingStatus === "AWAITING_CONFIRMATION");
  const availableFlights = filteredBookings.filter(booking => booking.bookingStatus === "AVAILABLE");
  const confirmedBookings = filteredBookings.filter(booking => booking.bookingStatus === "CONFIRMED" || booking.bookingStatus === "COMPLETED");

  const renderBookingGrid = (items: BookingDetails[], showNames: boolean = true) => (
    <>
      <Grid items={items.slice(0, visibleBookings)} className="flex-shrink-0">
        <GridColumn path="bookingNumber" header="#" autoWidth/>
        {showNames && (
          <>
            <GridColumn path="firstName" autoWidth/>
            <GridColumn path="lastName" autoWidth/>
          </>
        )}
        <GridColumn path="date" autoWidth/>
        <GridColumn path="from" autoWidth/>
        <GridColumn path="to" autoWidth/>
        <GridColumn header="Status" autoWidth>
          {({ item }) => renderStatus(item)}
        </GridColumn>
        <GridColumn path="bookingClass" autoWidth/>
      </Grid>
      {items.length > visibleBookings && (
        <Button onClick={() => setVisibleBookings(prev => prev + 10)} theme="primary" className="mt-4">
          Load More
        </Button>
      )}
    </>
  );

  if (isLoading) {
    return <div className="flex justify-center items-center h-full">Loading...</div>;
  }

  if (error) {
    return <div className="flex justify-center items-center h-full text-red-500">{error}</div>;
  }

  return (
    <>
      <SplitLayout className="h-full">
        <div className="flex flex-col gap-4 p-4 box-border h-full w-full md:w-1/4 bg-gray-100">
          <h2 className="text-2xl font-bold text-blue-600">Funnair Chat Support</h2>
          <MessageList messages={messages} className="flex-grow overflow-auto bg-white rounded-lg shadow-md p-4"/>
          <div className="relative">
            <MessageInput 
              onSubmit={e => sendMessage(e.detail.value)} 
              className="px-4 py-2 rounded-lg shadow-md" 
              disabled={working}
            />
            {working && (
              <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
                <ProgressBar indeterminate theme="small" />
              </div>
            )}
          </div>
        </div>
        <div className="flex flex-col gap-6 p-6 box-border overflow-auto w-full md:w-3/4 bg-gray-50">
          <div className="flex justify-between items-center">
            <h2 className="text-3xl font-bold text-blue-700">Flight Management Dashboard</h2>
            <Button
              theme="primary"
              onClick={() => setClientManagementOpen(true)}
            >
              Client Management
            </Button>
          </div>
          <TextField
            placeholder="Search bookings..."
            value={searchTerm}
            onValueChanged={e => setSearchTerm(e.detail.value)}
            className="mb-4"
          />
          <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
            <h3 className="text-xl font-semibold mb-3 text-blue-600">Bookings Awaiting Confirmation</h3>
            {renderBookingGrid(awaitingConfirmationBookings)}
          </section>
          <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
            <h3 className="text-xl font-semibold mb-3 text-blue-600">Available Flight Options</h3>
            {renderBookingGrid(availableFlights, false)}
          </section>
          <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
            <CustomButton onClick={() => setShowConfirmed(!showConfirmed)} className="mb-3">
              {showConfirmed ? 'Hide' : 'Show'} Confirmed Bookings ({confirmedBookings.length})
            </CustomButton>
            {showConfirmed && (
              confirmedBookings.length > 0 
                ? renderBookingGrid(confirmedBookings)
                : <p className="text-gray-600 italic">No confirmed bookings available at this time.</p>
            )}
          </section>
        </div>
      </SplitLayout>
      <ClientManagementModal
        open={clientManagementOpen}
        onClose={() => setClientManagementOpen(false)}
      />
      {errorNotification && (
        <Notification
          theme="error"
          position="bottom-center"
          duration={5000}
          opened
          onOpenedChanged={() => setErrorNotification(null)}
        >
          {errorNotification}
        </Notification>
      )}
    </>
  );
}

================
File: src/main/frontend/index.html
================
<!DOCTYPE html>
<!--
This file is auto-generated by Vaadin.
-->

<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body, #outlet {
      height: 100vh;
      width: 100%;
      margin: 0;
    }
  </style>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <!-- This outlet div is where the views are rendered -->
  <div id="outlet"></div>
</body>
</html>

================
File: src/main/java/org/vaadin/marcus/client/AssistantService.java
================
package org.vaadin.marcus.client;


import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;
import org.vaadin.marcus.langchain4j.LangChain4jAssistant;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Sinks;

@BrowserCallable
@AnonymousAllowed
public class AssistantService {

    private final LangChain4jAssistant langChain4JAssistant;

    public AssistantService(LangChain4jAssistant langChain4JAssistant) {
        this.langChain4JAssistant = langChain4JAssistant;
    }

    public Flux<String> chat(String chatId, String userMessage) {
        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();
        langChain4JAssistant.chat(chatId, userMessage)
                .onNext(sink::tryEmitNext)
                .onComplete(aiMessageResponse -> sink.tryEmitComplete())
                .onError(sink::tryEmitError)
                .start();

        return sink.asFlux();
    }
}

================
File: src/main/java/org/vaadin/marcus/client/BookingService.java
================
package org.vaadin.marcus.client;

import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.stereotype.Service;
import org.vaadin.marcus.data.BookingStatus;
import org.vaadin.marcus.service.BookingDetails;
import org.vaadin.marcus.service.FlightService;


@BrowserCallable
@AnonymousAllowed
@Service
public class BookingService {
    private final FlightService flightService;

    public BookingService(FlightService flightService) {
        this.flightService = flightService;
    }

    public List<BookingDetails> getBookings() {
        return flightService.getBookings();
    }

    //confirm booking
    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        flightService.confirmBooking(bookingNumber, firstName, lastName);
    }

    public List<BookingDetails> getConfirmedBookings() {
        return flightService.getBookings().stream()
                .filter(booking -> booking.getBookingStatus().equals(BookingStatus.CONFIRMED))
                .collect(Collectors.toList());
    }
}

================
File: src/main/java/org/vaadin/marcus/client/package-info.java
================
@NonNullApi
package org.vaadin.marcus.client;

import org.springframework.lang.NonNullApi;

================
File: src/main/java/org/vaadin/marcus/data/Booking.java
================
package org.vaadin.marcus.data;

import java.time.LocalDate;

public class Booking {

    private String bookingNumber;
    private LocalDate date;
    private LocalDate bookingTo;
    private Customer customer;
    private String from;
    private String to;
    private BookingStatus bookingStatus;
    private BookingClass bookingClass;

    public Booking(String bookingNumber, LocalDate date, Customer customer, BookingStatus bookingStatus, String from, String to, BookingClass bookingClass) {
        this.bookingNumber = bookingNumber;
        this.date = date;
        this.customer = customer;
        this.bookingStatus = bookingStatus;
        this.from = from;
        this.to = to;
        this.bookingClass = bookingClass;
    }


    public String getBookingNumber() {
        return bookingNumber;
    }

    public void setBookingNumber(String bookingNumber) {
        this.bookingNumber = bookingNumber;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalDate getBookingTo() {
        return bookingTo;
    }

    public void setBookingTo(LocalDate bookingTo) {
        this.bookingTo = bookingTo;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public BookingStatus getBookingStatus() {
        return bookingStatus;
    }

    public void setBookingStatus(BookingStatus bookingStatus) {
        this.bookingStatus = bookingStatus;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public BookingClass getBookingClass() {
        return bookingClass;
    }

    public void setBookingClass(BookingClass bookingClass) {
        this.bookingClass = bookingClass;
    }
}

================
File: src/main/java/org/vaadin/marcus/data/BookingClass.java
================
package org.vaadin.marcus.data;

public enum BookingClass {
    ECONOMY, PREMIUM_ECONOMY, BUSINESS
}

================
File: src/main/java/org/vaadin/marcus/data/BookingData.java
================
package org.vaadin.marcus.data;

import java.util.ArrayList;
import java.util.List;

public class BookingData {

    private List<Customer> customers = new ArrayList<>();
    private List<Booking> bookings = new ArrayList<>();


    public List<Customer> getCustomers() {
        return customers;
    }

    public void setCustomers(List<Customer> customers) {
        this.customers = customers;
    }

    public List<Booking> getBookings() {
        return bookings;
    }

    public void setBookings(List<Booking> bookings) {
        this.bookings = bookings;
    }

    //get available bookings ones with no first and last name
    public List<Booking> getAvailableBookings() {
        return bookings.stream().filter(b -> b.getCustomer().getFirstName() == null && b.getCustomer().getLastName() == null).toList();
    }

    //update booking in db
    public void updateBooking(Booking booking) {
        bookings.set(bookings.indexOf(booking), booking);
    }

   
}

================
File: src/main/java/org/vaadin/marcus/data/BookingStatus.java
================
package org.vaadin.marcus.data;

public enum BookingStatus {
    CONFIRMED, COMPLETED, CANCELLED,AWAITING_CONFIRMATION,AVAILABLE
}

================
File: src/main/java/org/vaadin/marcus/data/Customer.java
================
package org.vaadin.marcus.data;

import java.util.ArrayList;
import java.util.List;

public class Customer {

    private String firstName;
    private String lastName;

    private List<Booking> bookings = new ArrayList<>();

    public Customer() {
    }

    public Customer(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public List<Booking> getBookings() {
        return bookings;
    }

    public void setBookings(List<Booking> bookings) {
        this.bookings = bookings;
    }
}

================
File: src/main/java/org/vaadin/marcus/data/package-info.java
================
@NonNullApi
package org.vaadin.marcus.data;

import org.springframework.lang.NonNullApi;

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jAssistant.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.service.MemoryId;
import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.TokenStream;
import dev.langchain4j.service.UserMessage;
import dev.langchain4j.service.spring.AiService;

@AiService
public interface LangChain4jAssistant {

    @SystemMessage("""
            You are a customer chat support agent of an airline named "Funnair".
            Respond in a friendly, helpful, and joyful manner.
            You are interacting with customers through an online chat system.
            Before providing information about a booking or cancelling a booking,
            you MUST ensure you have the following information from the user:
            booking number, customer first name, and last name.
            Check the message history for this information before asking the user.
            Before changing a booking, you MUST ensure it is permitted by the terms.
            If there is a charge for the change, you MUST ask the user to consent before proceeding.
            Use the provided functions to fetch booking details, change bookings, and cancel bookings.
            Today is {{current_date}}.
            """)
    TokenStream chat(@MemoryId String chatId, @UserMessage String userMessage);
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jConfig.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.data.document.parser.TextDocumentParser;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.memory.chat.ChatMemoryProvider;
import dev.langchain4j.memory.chat.TokenWindowChatMemory;
import dev.langchain4j.model.Tokenizer;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.model.embedding.onnx.allminilml6v2.AllMiniLmL6V2EmbeddingModel;
import dev.langchain4j.rag.content.retriever.ContentRetriever;
import dev.langchain4j.rag.content.retriever.EmbeddingStoreContentRetriever;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;
import dev.langchain4j.store.embedding.inmemory.InMemoryEmbeddingStore;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ResourceLoader;

import static dev.langchain4j.data.document.loader.FileSystemDocumentLoader.loadDocument;
import static dev.langchain4j.data.document.splitter.DocumentSplitters.recursive;

@Configuration
public class LangChain4jConfig {

    @Bean
    EmbeddingModel embeddingModel() {
        return new AllMiniLmL6V2EmbeddingModel();
    }

    @Bean
    EmbeddingStore<TextSegment> embeddingStore() {
        return new InMemoryEmbeddingStore<>();
    }

    // In the real world, ingesting documents would often happen separately, on a CI server or similar
    @Bean
    CommandLineRunner ingestDocsForLangChain(
            EmbeddingModel embeddingModel,
            EmbeddingStore<TextSegment> embeddingStore,
            Tokenizer tokenizer, // Tokenizer is provided by langchain4j-open-ai-spring-boot-starter
            ResourceLoader resourceLoader
    ) {
        return args -> {
            var resource = resourceLoader.getResource("classpath:terms-of-service.txt");
            var termsOfUse = loadDocument(resource.getFile().toPath(), new TextDocumentParser());
            var ingestor = EmbeddingStoreIngestor.builder()
                    .documentSplitter(recursive(50, 0, tokenizer))
                    .embeddingModel(embeddingModel)
                    .embeddingStore(embeddingStore)
                    .build();
            ingestor.ingest(termsOfUse);
        };
    }

    @Bean
    ContentRetriever contentRetriever(
            EmbeddingStore<TextSegment> embeddingStore,
            EmbeddingModel embeddingModel
    ) {
        return EmbeddingStoreContentRetriever.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .maxResults(2)
                .minScore(0.6)
                .build();
    }

    @Bean
    ChatMemoryProvider chatMemoryProvider(Tokenizer tokenizer) {
        // Tokenizer is provided by langchain4j-open-ai-spring-boot-starter
        return chatId -> TokenWindowChatMemory.withMaxTokens(1000, tokenizer);
    }
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jTools.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.agent.tool.Tool;
import org.springframework.stereotype.Component;
import org.vaadin.marcus.service.*;
import org.vaadin.marcus.client.BookingService;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@Component
public class LangChain4jTools {

    private final FlightService flightService;
    private final ClientService clientService;

    public LangChain4jTools(FlightService flightService, ClientService clientService, BookingService bookingService) {
        this.flightService = flightService;
        this.clientService = clientService;
    }

    @Tool("Retrieves information about an existing booking")
    public BookingDetails getBookingDetails(String bookingNumber, String firstName, String lastName) {
        return flightService.getBookingDetails(bookingNumber, firstName, lastName);
    }

    @Tool("Modifies an existing booking")
    public void changeBooking(String bookingNumber, String firstName, String lastName,
                              LocalDate newFlightDate, String newDepartureAirport, String newArrivalAirport) {
        flightService.changeBooking(bookingNumber, firstName, lastName, newFlightDate, newDepartureAirport, newArrivalAirport);
    }

    @Tool("Cancels an existing booking")
    public void cancelBooking(String bookingNumber, String firstName, String lastName) {
        flightService.cancelBooking(bookingNumber, firstName, lastName);
    }

    @Tool("Books a flight")
    public void bookFlight(String bookingNumber, String firstName, String lastName) {
        flightService.updateBooking(bookingNumber, firstName, lastName);
    }

    @Tool("Retrieves a list of available bookings")
    public List<BookingDetails> getAvailableBookings() {
        return flightService.getAvailableBookings();
    }

    @Tool("Confirms an existing booking")
    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        flightService.confirmBooking(bookingNumber, firstName, lastName);
    }

    @Tool("Retrieves a list of confirmed bookings")
    public List<BookingDetails> getConfirmedBookings() {
        return flightService.getConfirmedBookings();
    }

    @Tool("Update client profile")
    public String updateClientProfile(String clientId, String profileData) {
        Map<String, String> profileMap = parseProfileData(profileData);
        clientService.updateProfile(clientId, profileMap);
        return "Client profile updated successfully.";
    }

    @Tool("Get client profile")
    public String getClientProfile(String clientId) {
        ClientProfile profile = clientService.getClientProfile(clientId);
        return profile != null ? profile.toString() : "Client profile not found.";
    }

    @Tool("Add frequent flyer information")
    public String addFrequentFlyerInfo(String clientId, String frequentFlyerNumber) {
        clientService.addFrequentFlyerInfo(clientId, frequentFlyerNumber);
        return "Frequent flyer information added successfully.";
    }

    @Tool("Get client's past bookings")
    public String getClientPastBookings(String clientId) {
        List<String> pastBookings = clientService.getPastBookings(clientId);
        return String.join(", ", pastBookings);
    }

    @Tool("Create client profile")
    public String createClientProfile(String clientId, String name, String contactInfo, String preferences) {
        Map<String, String> preferencesMap = parsePreferences(preferences);
        ClientProfile profile = new ClientProfile(clientId, name, contactInfo, preferencesMap);
        clientService.createClientProfile(clientId, profile);
        return "Client profile created successfully.";
    }

    @Tool("Search clients")
    public String searchClients(String query) {
        List<ClientProfile> results = clientService.searchClients(query);
        return results.toString();
    }

    @Tool("Add booking to client history")
    public String addBooking(String clientId, String bookingNumber, String date, String destination, String status) {
        Booking booking = new Booking(bookingNumber, LocalDate.parse(date), destination, status);
        clientService.addBooking(clientId, booking);
        return "Booking added to client history successfully.";
    }

    @Tool("Get client booking history")
    public String getBookingHistory(String clientId) {
        List<Booking> history = clientService.getBookingHistory(clientId);
        return history.toString();
    }

    @Tool("Log client interaction")
    public String logInteraction(String clientId, String type, String content) {
        Interaction interaction = new Interaction(LocalDateTime.now(), type, content);
        clientService.logInteraction(clientId, interaction);
        return "Client interaction logged successfully.";
    }

    @Tool("Get client interactions")
    public String getClientInteractions(String clientId) {
        List<Interaction> interactions = clientService.getClientInteractions(clientId);
        return interactions.toString();
    }

    @Tool("Segment clients")
    public String segmentClients(boolean highSpender, boolean frequentTraveler) {
        SegmentationCriteria criteria = new SegmentationCriteria();
        criteria.setHighSpender(highSpender);
        criteria.setFrequentTraveler(frequentTraveler);
        List<ClientProfile> segmentedClients = clientService.segmentClients(criteria);
        return segmentedClients.toString();
    }

    private Map<String, String> parseProfileData(String profileData) {
        Map<String, String> profileMap = new HashMap<>();
        String[] pairs = profileData.split(",");
        for (String pair : pairs) {
            String[] keyValue = pair.split(":");
            if (keyValue.length == 2) {
                profileMap.put(keyValue[0].trim(), keyValue[1].trim());
            }
        }
        return profileMap;
    }

    private Map<String, String> parsePreferences(String preferences) {
        // Implement parsing logic for preferences
        return new HashMap<>();
    }
}

================
File: src/main/java/org/vaadin/marcus/service/Booking.java
================
package org.vaadin.marcus.service;

import java.time.LocalDate;

public class Booking {
    private String bookingNumber;
    private LocalDate date;
    private String destination;
    private String status;

    public Booking(String bookingNumber, LocalDate date, String destination, String status) {
        this.bookingNumber = bookingNumber;
        this.date = date;
        this.destination = destination;
        this.status = status;
    }

    // Getters and setters
    public String getBookingNumber() { return bookingNumber; }
    public void setBookingNumber(String bookingNumber) { this.bookingNumber = bookingNumber; }
    public LocalDate getDate() { return date; }
    public void setDate(LocalDate date) { this.date = date; }
    public String getDestination() { return destination; }
    public void setDestination(String destination) { this.destination = destination; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}

================
File: src/main/java/org/vaadin/marcus/service/BookingDetails.java
================
package org.vaadin.marcus.service;

import org.vaadin.marcus.data.BookingStatus;

public class BookingDetails {
    private String bookingNumber;
    private String firstName;
    private String lastName;
    private String date;
    private String from;
    private String to;
    private String bookingStatus;
    private String bookingClass;

    // Constructor
    public BookingDetails(String bookingNumber, String firstName, String lastName, String date, String from, String to, String bookingStatus, String bookingClass) {
        this.bookingNumber = bookingNumber;
        this.firstName = firstName;
        this.lastName = lastName;
        this.date = date;
        this.from = from;
        this.to = to;
        this.bookingStatus = bookingStatus;
        this.bookingClass = bookingClass;
    }

    // Getters and setters
    public String getBookingNumber() { return bookingNumber; }
    public void setBookingNumber(String bookingNumber) { this.bookingNumber = bookingNumber; }
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    public String getDate() { return date; }
    public void setDate(String date) { this.date = date; }
    public String getFrom() { return from; }
    public void setFrom(String from) { this.from = from; }
    public String getTo() { return to; }
    public void setTo(String to) { this.to = to; }
    public String getBookingStatus() { return bookingStatus; }
    public void setBookingStatus(String bookingStatus) { this.bookingStatus = bookingStatus; }
    public String getBookingClass() { return bookingClass; }
    public void setBookingClass(String bookingClass) { this.bookingClass = bookingClass; }
}

================
File: src/main/java/org/vaadin/marcus/service/ClientProfile.java
================
package org.vaadin.marcus.service;

import java.util.Map;

public class ClientProfile {
    private String id;
    private String name;
    private String contactInfo;
    private String frequentFlyerNumber;
    private Map<String, String> preferences;

    public ClientProfile(String id, String name, String contactInfo, Map<String, String> preferences) {
        this.id = id;
        this.name = name;
        this.contactInfo = contactInfo;
        this.preferences = preferences;
    }

    // Getters and setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getContactInfo() { return contactInfo; }
    public void setContactInfo(String contactInfo) { this.contactInfo = contactInfo; }
    public String getFrequentFlyerNumber() { return frequentFlyerNumber; }
    public void setFrequentFlyerNumber(String frequentFlyerNumber) { this.frequentFlyerNumber = frequentFlyerNumber; }
    public Map<String, String> getPreferences() { return preferences; }
    public void setPreferences(Map<String, String> preferences) { this.preferences = preferences; }
}

================
File: src/main/java/org/vaadin/marcus/service/ClientService.java
================
package org.vaadin.marcus.service;

import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class ClientService {
    private Map<String, ClientProfile> clientProfiles = new HashMap<>();
    private Map<String, List<Booking>> bookingHistory = new HashMap<>();
    private Map<String, List<Interaction>> clientInteractions = new HashMap<>();

    public void createClientProfile(String clientId, ClientProfile profile) {
        clientProfiles.put(clientId, profile);
    }

    public ClientProfile getClientProfile(String clientId) {
        return clientProfiles.get(clientId);
    }

    public void updateClientProfile(String clientId, ClientProfile profile) {
        clientProfiles.put(clientId, profile);
    }

    public void deleteClientProfile(String clientId) {
        clientProfiles.remove(clientId);
    }

    public List<ClientProfile> searchClients(String query) {
        if (query == null || query.isEmpty()) {
            return new ArrayList<>(clientProfiles.values());
        }
        return clientProfiles.values().stream()
                .filter(profile -> profile.getName().toLowerCase().contains(query.toLowerCase())
                        || profile.getContactInfo().toLowerCase().contains(query.toLowerCase()))
                .collect(Collectors.toList());
    }

    public void addBooking(String clientId, Booking booking) {
        bookingHistory.computeIfAbsent(clientId, k -> new ArrayList<>()).add(booking);
    }

    public List<Booking> getBookingHistory(String clientId) {
        return bookingHistory.getOrDefault(clientId, new ArrayList<>());
    }

    public void logInteraction(String clientId, Interaction interaction) {
        clientInteractions.computeIfAbsent(clientId, k -> new ArrayList<>()).add(interaction);
    }

    public List<Interaction> getClientInteractions(String clientId) {
        return clientInteractions.getOrDefault(clientId, new ArrayList<>());
    }

    public List<ClientProfile> segmentClients(SegmentationCriteria criteria) {
        // Implement segmentation logic
        return new ArrayList<>();
    }

    public void updateProfile(String clientId, Map<String, String> profileMap) {
        ClientProfile profile = clientProfiles.get(clientId);
        if (profile != null) {
            profile.setName(profileMap.getOrDefault("name", profile.getName()));
            profile.setContactInfo(profileMap.getOrDefault("contactInfo", profile.getContactInfo()));
            profile.setFrequentFlyerNumber(profileMap.getOrDefault("frequentFlyerNumber", profile.getFrequentFlyerNumber()));
        }
    }

    public void addFrequentFlyerInfo(String clientId, String frequentFlyerNumber) {
        ClientProfile profile = clientProfiles.get(clientId);
        if (profile != null) {
            profile.setFrequentFlyerNumber(frequentFlyerNumber);
        }
    }

    public List<String> getPastBookings(String clientId) {
        List<Booking> bookings = bookingHistory.get(clientId);
        if (bookings != null) {
            return bookings.stream().map(Booking::getBookingNumber).collect(Collectors.toList());
        }
        return new ArrayList<>();
    }

    public void generateSampleData() {
        for (int i = 1; i <= 10; i++) {
            String clientId = "client" + i;
            ClientProfile profile = new ClientProfile(
                clientId,
                "Client " + i,
                String.format("client%d@example.com", i),
                Map.of("preferredSeat", (i % 2 == 0) ? "Window" : "Aisle")
            );
            profile.setFrequentFlyerNumber(String.format("FF%d", 1000 + i));
            createClientProfile(clientId, profile);
            
            // Add a sample booking
            Booking booking = new Booking("B" + (2000 + i), LocalDate.now().plusDays(i), "Destination " + i, "CONFIRMED");
            addBooking(clientId, booking);
            
            // Add a sample interaction
            Interaction interaction = new Interaction(LocalDateTime.now().minusDays(i), "Email", "Inquiry about flight " + i);
            logInteraction(clientId, interaction);
        }
    }
}

================
File: src/main/java/org/vaadin/marcus/service/FlightService.java
================
package org.vaadin.marcus.service;

import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class FlightService {
    private List<BookingDetails> bookings = new ArrayList<>();

    public BookingDetails getBookingDetails(String bookingNumber, String firstName, String lastName) {
        return bookings.stream()
                .filter(b -> b.getBookingNumber().equals(bookingNumber)
                        && b.getFirstName().equals(firstName)
                        && b.getLastName().equals(lastName))
                .findFirst()
                .orElse(null);
    }

    public void changeBooking(String bookingNumber, String firstName, String lastName,
                              LocalDate newFlightDate, String newDepartureAirport, String newArrivalAirport) {
        BookingDetails booking = getBookingDetails(bookingNumber, firstName, lastName);
        if (booking != null) {
            booking.setDate(newFlightDate.toString());
            booking.setFrom(newDepartureAirport);
            booking.setTo(newArrivalAirport);
        }
    }

    public void cancelBooking(String bookingNumber, String firstName, String lastName) {
        BookingDetails booking = getBookingDetails(bookingNumber, firstName, lastName);
        if (booking != null) {
            booking.setBookingStatus("CANCELLED");
        }
    }

    public void updateBooking(String bookingNumber, String firstName, String lastName) {
        BookingDetails booking = getBookingDetails(bookingNumber, firstName, lastName);
        if (booking != null) {
            booking.setFirstName(firstName);
            booking.setLastName(lastName);
            booking.setBookingStatus("CONFIRMED");
        }
    }

    public List<BookingDetails> getAvailableBookings() {
        return bookings.stream()
                .filter(b -> b.getBookingStatus().equals("AVAILABLE"))
                .collect(Collectors.toList());
    }

    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        BookingDetails booking = getBookingDetails(bookingNumber, firstName, lastName);
        if (booking != null) {
            booking.setBookingStatus("CONFIRMED");
        }
    }

    public List<BookingDetails> getConfirmedBookings() {
        return bookings.stream()
                .filter(b -> b.getBookingStatus().equals("CONFIRMED"))
                .collect(Collectors.toList());
    }

    public List<BookingDetails> getBookings() {
        return new ArrayList<>(bookings);
    }

    // Method to add a booking (for testing purposes)
    public void addBooking(BookingDetails booking) {
        bookings.add(booking);
    }
}

================
File: src/main/java/org/vaadin/marcus/service/Interaction.java
================
package org.vaadin.marcus.service;

import java.time.LocalDateTime;

public class Interaction {
    private LocalDateTime timestamp;
    private String type;
    private String content;

    public Interaction(LocalDateTime timestamp, String type, String content) {
        this.timestamp = timestamp;
        this.type = type;
        this.content = content;
    }

    // Getters and setters
    public LocalDateTime getTimestamp() { return timestamp; }
    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }
    public String getType() { return type; }
    public void setType(String type) { this.type = type; }
    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }
}

================
File: src/main/java/org/vaadin/marcus/service/SegmentationCriteria.java
================
package org.vaadin.marcus.service;

public class SegmentationCriteria {
    private boolean highSpender;
    private boolean frequentTraveler;

    // Getters and setters
    public boolean isHighSpender() { return highSpender; }
    public void setHighSpender(boolean highSpender) { this.highSpender = highSpender; }
    public boolean isFrequentTraveler() { return frequentTraveler; }
    public void setFrequentTraveler(boolean frequentTraveler) { this.frequentTraveler = frequentTraveler; }
}

================
File: src/main/java/org/vaadin/marcus/views/BookingView.java
================
package org.vaadin.marcus.views;

import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;

@Route(value = "bookings", layout = MainLayout.class)
public class BookingView extends VerticalLayout {
    public BookingView() {
        // Implement booking view
    }
}

================
File: src/main/java/org/vaadin/marcus/views/ChatView.java
================
package org.vaadin.marcus.views;

import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;

@Route(value = "chat", layout = MainLayout.class)
public class ChatView extends VerticalLayout {
    public ChatView() {
        // Implement chat view
    }
}

================
File: src/main/java/org/vaadin/marcus/views/ClientManagementView.java
================
package org.vaadin.marcus.views;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Paragraph;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.component.dialog.Dialog;
import org.vaadin.marcus.service.ClientProfile;
import org.vaadin.marcus.service.ClientService;

@Route(value = "client-management", layout = MainLayout.class)
public class ClientManagementView extends VerticalLayout {

    private final ClientService clientService;
    private final Grid<ClientProfile> clientGrid;
    private final TextField searchField;

    public ClientManagementView(ClientService clientService) {
        this.clientService = clientService;

        H2 title = new H2("Client Management Dashboard");
        searchField = new TextField("Search Clients");
        Button searchButton = new Button("Search", e -> searchClients());
        clientGrid = new Grid<>(ClientProfile.class);

        add(title, searchField, searchButton, clientGrid);

        configureGrid();
        updateGrid();
    }

    private void configureGrid() {
        clientGrid.addColumn(ClientProfile::getId).setHeader("ID");
        clientGrid.addColumn(ClientProfile::getName).setHeader("Name");
        clientGrid.addColumn(ClientProfile::getContactInfo).setHeader("Contact Info");
        clientGrid.addColumn(ClientProfile::getFrequentFlyerNumber).setHeader("Frequent Flyer Number");
        clientGrid.addComponentColumn(this::createActionButtons).setHeader("Actions");
    }

    private void updateGrid() {
        clientGrid.setItems(clientService.searchClients(""));
    }

    private void searchClients() {
        String query = searchField.getValue();
        clientGrid.setItems(clientService.searchClients(query));
    }

    private HorizontalLayout createActionButtons(ClientProfile client) {
        Button viewButton = new Button("View", e -> viewClient(client));
        Button editButton = new Button("Edit", e -> editClient(client));
        Button deleteButton = new Button("Delete", e -> deleteClient(client));

        return new HorizontalLayout(viewButton, editButton, deleteButton);
    }

    private void viewClient(ClientProfile client) {
        Dialog dialog = new Dialog();
        dialog.add(new H3("Client Details"));
        dialog.add(new Paragraph("ID: " + client.getId()));
        dialog.add(new Paragraph("Name: " + client.getName()));
        dialog.add(new Paragraph("Contact: " + client.getContactInfo()));
        dialog.add(new Paragraph("Frequent Flyer: " + client.getFrequentFlyerNumber()));
        dialog.add(new Paragraph("Preferences: " + client.getPreferences()));
        dialog.open();
    }

    private void editClient(ClientProfile client) {
        ClientProfileDialog dialog = new ClientProfileDialog(clientService, client);
        dialog.addOpenedChangeListener(event -> {
            if (!event.isOpened()) {
                updateGrid();
            }
        });
        dialog.open();
    }

    private void deleteClient(ClientProfile client) {
        clientService.deleteClientProfile(client.getId());
        updateGrid();
    }
}

================
File: src/main/java/org/vaadin/marcus/views/ClientProfileDialog.java
================
package org.vaadin.marcus.views;

import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import org.vaadin.marcus.service.ClientProfile;
import org.vaadin.marcus.service.ClientService;

public class ClientProfileDialog extends Dialog {

    private final ClientService clientService;
    private final ClientProfile clientProfile;
    private final Binder<ClientProfile> binder;

    public ClientProfileDialog(ClientService clientService, ClientProfile clientProfile) {
        this.clientService = clientService;
        this.clientProfile = clientProfile;
        this.binder = new Binder<>(ClientProfile.class);

        FormLayout formLayout = new FormLayout();
        TextField nameField = new TextField("Name");
        TextField contactInfoField = new TextField("Contact Info");
        TextField frequentFlyerField = new TextField("Frequent Flyer Number");

        formLayout.add(nameField, contactInfoField, frequentFlyerField);

        binder.bindInstanceFields(this);
        binder.readBean(clientProfile);

        Button saveButton = new Button("Save", e -> saveClient());
        Button cancelButton = new Button("Cancel", e -> close());

        add(formLayout, saveButton, cancelButton);
    }

    private void saveClient() {
        if (binder.writeBeanIfValid(clientProfile)) {
            clientService.updateClientProfile(clientProfile.getId(), clientProfile);
            close();
        }
    }
}

================
File: src/main/java/org/vaadin/marcus/views/MainLayout.java
================
package org.vaadin.marcus.views;

import com.vaadin.flow.component.applayout.AppLayout;
import com.vaadin.flow.component.applayout.DrawerToggle;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.RouterLink;
import org.vaadin.marcus.views.ChatView;
import org.vaadin.marcus.views.BookingView;
import org.vaadin.marcus.views.ClientManagementView;

public class MainLayout extends AppLayout {

    public MainLayout() {
        DrawerToggle toggle = new DrawerToggle();

        H1 title = new H1("Funnair Customer Support");
        title.getStyle().set("font-size", "var(--lumo-font-size-l)")
                .set("margin", "0");

        addToNavbar(toggle, title);

        VerticalLayout menuLayout = new VerticalLayout();
        menuLayout.add(new RouterLink("Chat", ChatView.class));
        menuLayout.add(new RouterLink("Bookings", BookingView.class));
        menuLayout.add(new RouterLink("Client Management", ClientManagementView.class));

        addToDrawer(menuLayout);
    }
}

================
File: src/main/java/org/vaadin/marcus/Application.java
================
package org.vaadin.marcus;

import com.vaadin.flow.component.page.AppShellConfigurator;
import com.vaadin.flow.theme.Theme;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;


@SpringBootApplication
@Theme(value = "customer-support-agent")
public class Application implements AppShellConfigurator {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}

================
File: src/main/resources/banner.txt
================
_                       _    ___ 
     | | __ ___   ____ _     / \  |_ _|
  _  | |/ _` \ \ / / _` |   / _ \  | | 
 | |_| | (_| |\ V / (_| |  / ___ \ | | 
  \___/ \__,_| \_/ \__,_| /_/   \_\___|

================
File: src/main/resources/terms-of-service.txt
================
These Terms of Service govern your experience with Funnair. By booking a flight, you agree to these terms.

1. Booking Flights
- Book via our website or mobile app.
- Full payment required at booking.
- Ensure accuracy of personal information (Name, ID, etc.) as corrections may incur a $25 fee.

2. Changing Bookings
- Changes allowed up to 24 hours before flight.
- Change via online or contact our support.
- Change fee: $50 for Economy, $30 for Premium Economy, Free for Business Class.

3. Cancelling Bookings
- Cancel up to 48 hours before flight.
- Cancellation fees: $75 for Economy, $50 for Premium Economy, $25 for Business Class.
- Refunds processed within 7 business days.

================
File: .gitignore
================
/target/
.gradle
build/
!**/src/main/**/target/
!**/src/test/**/target/
!**/src/main/**/build/
!**/src/test/**/build/

# The following files are automatically generated/updated
node_modules/
frontend/generated/
.npmrc
vite.generated.ts

# Hide application.properties
application.properties
src/main/resources/application.properties

# Eclipse and STS
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

# IntelliJ IDEA
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

# VS Code
.vscode/

# Eclipse store
storage/

src/main/frontend/generated/

# Compiled class file
*.class

# Log files
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

# IntelliJ IDEA
.idea/
*.iws
*.iml
*.ipr

# Eclipse
.classpath
.project
.settings/

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/

# VS Code
.vscode/

# Mac OS
.DS_Store

# Windows
Thumbs.db

# Vaadin specific
node_modules/
frontend/generated/
webpack.generated.js

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Marcus Hellberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /usr/local/etc/mavenrc ] ; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`\\unset -f command; \\command -v java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  $MAVEN_DEBUG_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" \
  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"

================
File: mvnw.cmd
================
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%

================
File: package.json
================
{
  "name": "no-name",
  "license": "UNLICENSED",
  "type": "module",
  "dependencies": {
    "@polymer/polymer": "3.5.1",
    "@vaadin/bundles": "24.4.7",
    "@vaadin/common-frontend": "0.0.19",
    "@vaadin/hilla-file-router": "24.4.7",
    "@vaadin/hilla-frontend": "24.4.7",
    "@vaadin/hilla-lit-form": "24.4.7",
    "@vaadin/hilla-react-auth": "24.4.7",
    "@vaadin/hilla-react-crud": "24.4.7",
    "@vaadin/hilla-react-form": "24.4.7",
    "@vaadin/hilla-react-i18n": "24.4.7",
    "@vaadin/hilla-react-signals": "24.4.7",
    "@vaadin/polymer-legacy-adapter": "24.4.7",
    "@vaadin/react-components": "24.4.7",
    "@vaadin/router": "1.7.5",
    "@vaadin/vaadin-development-mode-detector": "2.0.7",
    "@vaadin/vaadin-lumo-styles": "24.4.7",
    "@vaadin/vaadin-material-styles": "24.4.7",
    "@vaadin/vaadin-themable-mixin": "24.4.7",
    "@vaadin/vaadin-usage-statistics": "2.1.3",
    "construct-style-sheets-polyfill": "3.1.0",
    "date-fns": "2.29.3",
    "lit": "3.1.4",
    "nanoid": "^5.0.6",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-markdown": "^9.0.1",
    "react-router-dom": "6.26.1"
  },
  "devDependencies": {
    "@babel/preset-react": "7.24.7",
    "@rollup/plugin-replace": "5.0.7",
    "@rollup/pluginutils": "5.1.0",
    "@types/react": "18.3.4",
    "@types/react-dom": "18.3.0",
    "@vaadin/hilla-generator-cli": "24.4.7",
    "@vaadin/hilla-generator-core": "24.4.7",
    "@vaadin/hilla-generator-plugin-backbone": "24.4.7",
    "@vaadin/hilla-generator-plugin-barrel": "24.4.7",
    "@vaadin/hilla-generator-plugin-client": "24.4.7",
    "@vaadin/hilla-generator-plugin-model": "24.4.7",
    "@vaadin/hilla-generator-plugin-push": "24.4.7",
    "@vaadin/hilla-generator-plugin-subtypes": "24.4.7",
    "@vaadin/hilla-generator-utils": "24.4.7",
    "@vitejs/plugin-react": "4.3.1",
    "async": "3.2.6",
    "glob": "10.4.5",
    "rollup-plugin-brotli": "3.1.0",
    "rollup-plugin-visualizer": "5.12.0",
    "strip-css-comments": "5.0.0",
    "transform-ast": "2.4.4",
    "typescript": "5.4.5",
    "vite": "5.4.2",
    "vite-plugin-checker": "0.6.4",
    "workbox-build": "7.1.1",
    "workbox-core": "7.1.0",
    "workbox-precaching": "7.1.0"
  },
  "vaadin": {
    "dependencies": {
      "@polymer/polymer": "3.5.1",
      "@vaadin/bundles": "24.4.7",
      "@vaadin/common-frontend": "0.0.19",
      "@vaadin/hilla-file-router": "24.4.7",
      "@vaadin/hilla-frontend": "24.4.7",
      "@vaadin/hilla-lit-form": "24.4.7",
      "@vaadin/hilla-react-auth": "24.4.7",
      "@vaadin/hilla-react-crud": "24.4.7",
      "@vaadin/hilla-react-form": "24.4.7",
      "@vaadin/hilla-react-i18n": "24.4.7",
      "@vaadin/hilla-react-signals": "24.4.7",
      "@vaadin/polymer-legacy-adapter": "24.4.7",
      "@vaadin/react-components": "24.4.7",
      "@vaadin/router": "1.7.5",
      "@vaadin/vaadin-development-mode-detector": "2.0.7",
      "@vaadin/vaadin-lumo-styles": "24.4.7",
      "@vaadin/vaadin-material-styles": "24.4.7",
      "@vaadin/vaadin-themable-mixin": "24.4.7",
      "@vaadin/vaadin-usage-statistics": "2.1.3",
      "construct-style-sheets-polyfill": "3.1.0",
      "date-fns": "2.29.3",
      "lit": "3.1.4",
      "react": "18.3.1",
      "react-dom": "18.3.1",
      "react-router-dom": "6.26.1"
    },
    "devDependencies": {
      "@babel/preset-react": "7.24.7",
      "@rollup/plugin-replace": "5.0.7",
      "@rollup/pluginutils": "5.1.0",
      "@types/react": "18.3.4",
      "@types/react-dom": "18.3.0",
      "@vaadin/hilla-generator-cli": "24.4.7",
      "@vaadin/hilla-generator-core": "24.4.7",
      "@vaadin/hilla-generator-plugin-backbone": "24.4.7",
      "@vaadin/hilla-generator-plugin-barrel": "24.4.7",
      "@vaadin/hilla-generator-plugin-client": "24.4.7",
      "@vaadin/hilla-generator-plugin-model": "24.4.7",
      "@vaadin/hilla-generator-plugin-push": "24.4.7",
      "@vaadin/hilla-generator-plugin-subtypes": "24.4.7",
      "@vaadin/hilla-generator-utils": "24.4.7",
      "@vitejs/plugin-react": "4.3.1",
      "async": "3.2.6",
      "glob": "10.4.5",
      "rollup-plugin-brotli": "3.1.0",
      "rollup-plugin-visualizer": "5.12.0",
      "strip-css-comments": "5.0.0",
      "transform-ast": "2.4.4",
      "typescript": "5.4.5",
      "vite": "5.4.2",
      "vite-plugin-checker": "0.6.4",
      "workbox-build": "7.1.1",
      "workbox-core": "7.1.0",
      "workbox-precaching": "7.1.0"
    },
    "hash": "520c772bcedd34707395adacc2eb9caf1f29f1a638a8578a8bf5b6aa831e9fd7"
  },
  "overrides": {
    "@vaadin/bundles": "$@vaadin/bundles",
    "@vaadin/common-frontend": "$@vaadin/common-frontend",
    "construct-style-sheets-polyfill": "$construct-style-sheets-polyfill",
    "lit": "$lit",
    "@vaadin/router": "$@vaadin/router",
    "@polymer/polymer": "$@polymer/polymer",
    "nanoid": "$nanoid",
    "react-markdown": "$react-markdown",
    "@vaadin/polymer-legacy-adapter": "$@vaadin/polymer-legacy-adapter",
    "@vaadin/vaadin-development-mode-detector": "$@vaadin/vaadin-development-mode-detector",
    "@vaadin/vaadin-usage-statistics": "$@vaadin/vaadin-usage-statistics",
    "@vaadin/react-components": "$@vaadin/react-components",
    "react-dom": "$react-dom",
    "@vaadin/hilla-frontend": "$@vaadin/hilla-frontend",
    "@vaadin/hilla-react-auth": "$@vaadin/hilla-react-auth",
    "react": "$react",
    "@vaadin/hilla-react-crud": "$@vaadin/hilla-react-crud",
    "@vaadin/hilla-file-router": "$@vaadin/hilla-file-router",
    "react-router-dom": "$react-router-dom",
    "@vaadin/hilla-react-i18n": "$@vaadin/hilla-react-i18n",
    "@vaadin/hilla-lit-form": "$@vaadin/hilla-lit-form",
    "@vaadin/hilla-react-form": "$@vaadin/hilla-react-form",
    "@vaadin/hilla-react-signals": "$@vaadin/hilla-react-signals",
    "date-fns": "$date-fns",
    "@vaadin/vaadin-themable-mixin": "$@vaadin/vaadin-themable-mixin",
    "@vaadin/vaadin-lumo-styles": "$@vaadin/vaadin-lumo-styles",
    "@vaadin/vaadin-material-styles": "$@vaadin/vaadin-material-styles"
  }
}

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- Project from https://github.com/marcushellberg/java-ai-playground -->
    <groupId>org.vaadin.marcus</groupId>
    <artifactId>java-ai-playground</artifactId>
    <name>java-ai-playground</name>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>17</java.version>
        <vaadin.version>24.4.11</vaadin.version>
        <langchain4j.version>0.34.0</langchain4j.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
    </parent>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>vaadin-prereleases</id>
            <url>https://maven.vaadin.com/vaadin-prereleases</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>vaadin-prereleases</id>
            <url>https://maven.vaadin.com/vaadin-prereleases</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- LangChain4j dependencies -->
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-spring-boot-starter</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-open-ai-spring-boot-starter</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-embeddings-all-minilm-l6-v2</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <defaultGoal>spring-boot:run</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5247</jvmArguments>
                    <wait>500</wait>
                    <maxAttempts>240</maxAttempts>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-frontend</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- Production mode is activated using -Pproduction -->
            <id>production</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.vaadin</groupId>
                        <artifactId>vaadin-maven-plugin</artifactId>
                        <version>${vaadin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>build-frontend</goal>
                                </goals>
                                <phase>compile</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

================
File: README.md
================
# Funnair AI-Powered Customer Support (Fork)

<img width="1723" alt="image" src="https://github.com/user-attachments/assets/d57cd1b8-6295-4a8e-aebb-90ce9b7c8578">

This app demonstrates an advanced AI-powered customer support system for Funnair, a fictional airline. It showcases intelligent AI integration for handling customer inquiries and managing bookings efficiently.

## Key Features

- **AI-Powered Chat Interface**: Intelligent conversational agent for customer support
- **Comprehensive Booking Management**: Tools for tracking, updating, and managing booking statuses
- **Client Management Dashboard**: Advanced tools for managing client profiles, preferences, and interactions
- **In-Memory Chat History**: Maintains chat context within a session for coherent interactions
- **Booking Confirmation Workflow**: Guides users through a streamlined booking confirmation process
- **Retrieval Augmented Generation (RAG)**: Accesses relevant information like terms and conditions
- **Integrated Tool Usage**: Utilizes Java methods to perform actions based on user requests
- **Dynamic Booking Status Updates**: Real-time updates of booking statuses with color-coded indicators
- **Searchable Booking Grid**: Easily find and manage bookings with a powerful search feature
- **Booking Status Counts**: Quick overview of bookings in different statuses
- **Client Segmentation**: Ability to segment clients based on various criteria for targeted promotions

## Tech Stack

- Backend: Spring Boot
- Frontend: Vaadin Hilla
- AI Integration: LangChain4j

## Requirements

- Java 21+
- OpenAI API key

## Setup and Running

1. Clone the repository
2. Set the `OPENAI_API_KEY` environment variable
3. Run the application:
   - IDE: Execute `Application.java`
   - Command line: Run `mvn`
4. Access the app at `http://localhost:8080`

## Usage Guide

1. **Chat Interface**: Interact with the AI assistant for flight information, bookings, or general inquiries.
2. **Booking Management**: 
   - Use the tabbed interface to view different booking statuses (All, Confirmed, Pending, Cancelled)
   - Search for specific bookings using the search bar
   - Check booking status counts at the top of the grid for a quick overview
3. **AI-Assisted Actions**: The AI can help with tasks like retrieving booking details, updating statuses, and confirming reservations.

## Recent Enhancements

- Implemented a comprehensive Client Management Dashboard for travel agents
- Added functionality to create, update, and delete client profiles
- Introduced client preference storage and automatic application during bookings
- Implemented booking history tracking and filtering capabilities
- Added client interaction logging for improved communication context
- Introduced client segmentation features for targeted marketing
- Enhanced data security with role-based access control for client information

## Roadmap

- Implement more complex booking management workflows
- Enhance error handling and edge case management in AI interactions
- Develop an advanced memory management system for extended context retention
- Introduce data visualization for booking trends and analytics
- Client Management: Enable the chatbot to manage client profiles, including preferences, frequent flyer information, and past bookings for personalized service
- Multi-Booking Management: Allow handling of multiple bookings simultaneously, including group bookings, with real-time status tracking
- Bulk Email/SMS Notifications: Implement a feature for sending bulk notifications to clients regarding booking confirmations, itinerary changes, or special offers

## Contributing

We welcome contributions! Please feel free to submit Pull Requests or open Issues for suggestions and bug reports.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## AI-Assisted Development

This application was developed with the assistance of AI technologies. Specifically:

- LangChain4j was used for integrating large language models and AI services.
- AI-powered tools were utilized during the development process to enhance productivity and code quality.

================
File: tsconfig.json
================
// This TypeScript configuration file is generated by vaadin-maven-plugin.
// This is needed for TypeScript compiler to compile your TypeScript code in the project.
// It is recommended to commit this file to the VCS.
// You might want to change the configurations to fit your preferences
// For more information about the configurations, please refer to http://www.typescriptlang.org/docs/handbook/tsconfig-json.html
{
  "_version": "9.1",
  "compilerOptions": {
    "sourceMap": true,
    "jsx": "react-jsx",
    "inlineSources": true,
    "module": "esNext",
    "target": "es2020",
    "moduleResolution": "bundler",
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "baseUrl": "src/main/frontend",
    "paths": {
      "@vaadin/flow-frontend": ["generated/jar-resources"],
      "@vaadin/flow-frontend/*": ["generated/jar-resources/*"],
      "Frontend/*": ["*"]
    },
    "typeRoots": ["./node_modules/@types", "./src/main/frontend/types"]
  },
  "include": [
    "src/main/frontend/**/*",
    "types.d.ts"
  ],
  "exclude": [
    "src/main/frontend/generated/jar-resources/**"
  ]
}

================
File: types.d.ts
================
declare module '*.module.css' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.sass' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.scss' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.less' {
  declare const classes: Record<string, string>;
  export default classes;
}
declare module '*.module.styl' {
  declare const classes: Record<string, string>;
  export default classes;
}

/* CSS FILES */
declare module '*.css';
declare module '*.sass';
declare module '*.scss';
declare module '*.less';
declare module '*.styl';

/* IMAGES */
declare module '*.svg' {
  const ref: string;
  export default ref;
}
declare module '*.bmp' {
  const ref: string;
  export default ref;
}
declare module '*.gif' {
  const ref: string;
  export default ref;
}
declare module '*.jpg' {
  const ref: string;
  export default ref;
}
declare module '*.jpeg' {
  const ref: string;
  export default ref;
}
declare module '*.png' {
  const ref: string;
  export default ref;
}
declare module '*.avif' {
  const ref: string;
  export default ref;
}
declare module '*.webp' {
  const ref: string;
  export default ref;
}
declare module '*.css?inline' {
  import type { CSSResultGroup } from 'lit';
  const content: CSSResultGroup;
  export default content;
}

declare module 'csstype' {
  interface Properties {
    [index: `--${string}`]: any;
  }
}

================
File: vite.config.ts
================
import { UserConfigFn } from 'vite';
import { overrideVaadinConfig } from './vite.generated';

const customConfig: UserConfigFn = (env) => ({
  // Here you can add custom Vite parameters
  // https://vitejs.dev/config/
});

export default overrideVaadinConfig(customConfig);
