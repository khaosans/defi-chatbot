This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-15T08:23:50.214Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.mvn/
  wrapper/
    maven-wrapper.properties
    MavenWrapperDownloader.java
src/
  main/
    frontend/
      components/
        CustomButton.tsx
        Message.tsx
        MessageList.tsx
        Pagination.tsx
      themes/
        customer-support-agent/
          theme.json
      views/
        @index.tsx
      index.html
    java/
      org/
        vaadin/
          marcus/
            client/
              AssistantService.java
              BookingService.java
              package-info.java
            data/
              Booking.java
              BookingClass.java
              BookingData.java
              BookingStatus.java
              Customer.java
              package-info.java
            langchain4j/
              LangChain4jAssistant.java
              LangChain4jConfig.java
              LangChain4jTools.java
            service/
              BookingDetails.java
              FlightService.java
            Application.java
    resources/
      banner.txt
      terms-of-service.txt
.gitignore
LICENSE
mvnw
mvnw.cmd
package.json
pom.xml
README.md
tsconfig.json
types.d.ts
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar

================
File: .mvn/wrapper/MavenWrapperDownloader.java
================
/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.io.*;
import java.net.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is
     * provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
            + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl
     * property to use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH = ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH = ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download
     * url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a
        // custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if (mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if (mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if (!outputFile.getParentFile().exists()) {
            if (!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

================
File: src/main/frontend/components/CustomButton.tsx
================
import React from 'react';
import { Button } from "@vaadin/react-components/Button";

interface CustomButtonProps {
  onClick?: () => void;
  className?: string;
  children: React.ReactNode;
  disabled?: boolean;
}

const CustomButton: React.FC<CustomButtonProps> = ({ onClick, className, children, disabled }) => {
  return (
    <Button
      onClick={onClick}
      className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded ${className}`}
      disabled={disabled}
    >
      {children}
    </Button>
  );
};

export default CustomButton;

================
File: src/main/frontend/components/Message.tsx
================
import Markdown from "react-markdown";

export interface MessageItem {
  role: 'user' | 'assistant';
  content: string;
}

interface MessageProps {
  message: MessageItem;
}

export default function Message({message}: MessageProps) {
  return (
    <div className="mb-l">
      <div className="font-bold">{message.role === 'user' ? '🧑‍💻 You' : '🤖 Assistant'}</div>
      <div>
        <Markdown>
          {message.content}
        </Markdown>
      </div>
    </div>
  )
};

================
File: src/main/frontend/components/MessageList.tsx
================
import React, { useRef, useEffect } from 'react';
import Message, {MessageItem} from './Message';

interface MessageListProps {
  messages: MessageItem[];
  className?: string;
}

export default function MessageList({ messages, className }: MessageListProps) {
  const endOfMessagesRef = useRef<HTMLDivElement>(null);

  // Automatically scroll down whenever the messages change
  useEffect(() => {
    if (endOfMessagesRef.current) {
      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  return (
    <div className={className}>
      {messages.map((msg, index) => (
        <Message key={index} message={msg} />
      ))}
      <div ref={endOfMessagesRef} />
    </div>
  );
}

================
File: src/main/frontend/components/Pagination.tsx
================
import React from 'react';
import CustomButton from './CustomButton';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {
  return (
    <div className="flex justify-center items-center mt-4 space-x-2">
      <CustomButton
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="px-2 py-1 text-sm"
      >
        Previous
      </CustomButton>
      <span className="text-gray-700">
        Page {currentPage} of {totalPages}
      </span>
      <CustomButton
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="px-2 py-1 text-sm"
      >
        Next
      </CustomButton>
    </div>
  );
};

export default Pagination;

================
File: src/main/frontend/themes/customer-support-agent/theme.json
================
{
  "lumoImports" : [ "typography", "color", "spacing", "badge", "utility" ]
}

================
File: src/main/frontend/views/@index.tsx
================
import { useEffect, useState } from "react";
import { AssistantService, BookingService } from "Frontend/generated/endpoints";
import BookingDetails from "../generated/org/vaadin/marcus/service/BookingDetails";
import { GridColumn } from "@vaadin/react-components/GridColumn";
import { Grid } from "@vaadin/react-components/Grid";
import { MessageInput } from "@vaadin/react-components/MessageInput";
import { nanoid } from "nanoid";
import { SplitLayout } from "@vaadin/react-components/SplitLayout";
import Message, { MessageItem } from "../components/Message";
import MessageList from "Frontend/components/MessageList";
import CustomButton from "../components/CustomButton";

const statusIcons: { [key: string]: string } = {
  CONFIRMED: "✅",
  COMPLETED: "🏁",
  CANCELLED: "❌",
  AWAITING_CONFIRMATION: "⏳",
  AVAILABLE: "🟢"
};

export default function Index() {
  const [chatId] = useState(nanoid());
  const [working, setWorking] = useState(false);
  const [bookings, setBookings] = useState<BookingDetails[]>([]);
  const [messages, setMessages] = useState<MessageItem[]>([{
    role: 'assistant',
    content: 'Welcome to Funnair! How can I help you?'
  }]);
  const [showConfirmed, setShowConfirmed] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setIsLoading(true);
    setError(null);
    BookingService.getBookings()
      .then(setBookings)
      .catch(err => setError("Failed to load bookings. Please try again."))
      .finally(() => setIsLoading(false));
  }, []);

  const addMessage = (message: MessageItem) => {
    setMessages(messages => [...messages, message]);
  };

  const appendToLatestMessage = (chunk: string) => {
    setMessages(messages => {
      const latestMessage = messages[messages.length - 1];
      latestMessage.content += chunk;
      return [...messages.slice(0, -1), latestMessage];
    });
  };

  const sendMessage = async (message: string) => {
    setWorking(true);
    addMessage({ role: 'user', content: message });
    let first = true;
    AssistantService.chat(chatId, message)
      .onNext(token => {
        if (first && token) {
          addMessage({ role: 'assistant', content: token });
          first = false;
        } else {
          appendToLatestMessage(token);
        }
      })
      .onError(() => {
        setError("Failed to send message. Please try again.");
        setWorking(false);
      })
      .onComplete(() => setWorking(false));
  };

  const renderStatus = (booking: BookingDetails) => {
    const status = booking.bookingStatus;
    return statusIcons[status as keyof typeof statusIcons] || status;
  };

  const awaitingConfirmationBookings = bookings.filter(booking => booking.bookingStatus === "AWAITING_CONFIRMATION");
  const availableFlights = bookings.filter(booking => booking.bookingStatus === "AVAILABLE");
  const confirmedBookings = bookings.filter(booking => booking.bookingStatus === "CONFIRMED");

  const renderBookingGrid = (items: BookingDetails[], showNames: boolean = true) => (
    <Grid items={items} className="flex-shrink-0">
      <GridColumn path="bookingNumber" header="#" autoWidth/>
      {showNames && (
        <>
          <GridColumn path="firstName" autoWidth/>
          <GridColumn path="lastName" autoWidth/>
        </>
      )}
      <GridColumn path="date" autoWidth/>
      <GridColumn path="from" autoWidth/>
      <GridColumn path="to" autoWidth/>
      <GridColumn header="Status" autoWidth>
        {({ item }) => renderStatus(item)}
      </GridColumn>
      <GridColumn path="bookingClass" autoWidth/>
    </Grid>
  );

  if (isLoading) {
    return <div className="flex justify-center items-center h-full">Loading...</div>;
  }

  if (error) {
    return <div className="flex justify-center items-center h-full text-red-500">{error}</div>;
  }

  return (
    <SplitLayout className="h-full">
      <div className="flex flex-col gap-4 p-4 box-border h-full w-full md:w-1/4 bg-gray-100">
        <h2 className="text-2xl font-bold text-blue-600 border-b-2 border-blue-300 pb-2">Funnair Chat Support</h2>
        <MessageList messages={messages} className="flex-grow overflow-auto bg-white rounded-lg shadow-md p-4"/>
        <MessageInput 
          onSubmit={e => sendMessage(e.detail.value)} 
          className="px-4 py-2 rounded-lg shadow-md" 
          disabled={working}
        />
      </div>
      <div className="flex flex-col gap-6 p-6 box-border overflow-auto w-full md:w-3/4 bg-gray-50">
        <h2 className="text-3xl font-bold text-blue-700 border-b-2 border-blue-300 pb-2">Flight Management Dashboard</h2>
        <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
          <h3 className="text-xl font-semibold mb-3 text-blue-600">Bookings Awaiting Confirmation</h3>
          {renderBookingGrid(awaitingConfirmationBookings)}
        </section>
        <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
          <h3 className="text-xl font-semibold mb-3 text-blue-600">Available Flight Options</h3>
          {renderBookingGrid(availableFlights, false)}
        </section>
        <section className="bg-white rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow duration-300">
          <CustomButton onClick={() => setShowConfirmed(!showConfirmed)} className="mb-3">
            {showConfirmed ? 'Hide' : 'Show'} Confirmed Bookings ({confirmedBookings.length})
          </CustomButton>
          {showConfirmed && (
            confirmedBookings.length > 0 
              ? renderBookingGrid(confirmedBookings)
              : <p className="text-gray-600 italic">No confirmed bookings available at this time.</p>
          )}
        </section>
      </div>
    </SplitLayout>
  );
}

================
File: src/main/frontend/index.html
================
<!DOCTYPE html>
<!--
This file is auto-generated by Vaadin.
-->

<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body, #outlet {
      height: 100vh;
      width: 100%;
      margin: 0;
    }
  </style>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <!-- This outlet div is where the views are rendered -->
  <div id="outlet"></div>
</body>
</html>

================
File: src/main/java/org/vaadin/marcus/client/AssistantService.java
================
package org.vaadin.marcus.client;


import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;
import org.vaadin.marcus.langchain4j.LangChain4jAssistant;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Sinks;

@BrowserCallable
@AnonymousAllowed
public class AssistantService {

    private final LangChain4jAssistant langChain4JAssistant;

    public AssistantService(LangChain4jAssistant langChain4JAssistant) {
        this.langChain4JAssistant = langChain4JAssistant;
    }

    public Flux<String> chat(String chatId, String userMessage) {
        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();
        langChain4JAssistant.chat(chatId, userMessage)
                .onNext(sink::tryEmitNext)
                .onComplete(aiMessageResponse -> sink.tryEmitComplete())
                .onError(sink::tryEmitError)
                .start();

        return sink.asFlux();
    }
}

================
File: src/main/java/org/vaadin/marcus/client/BookingService.java
================
package org.vaadin.marcus.client;

import com.vaadin.flow.server.auth.AnonymousAllowed;
import com.vaadin.hilla.BrowserCallable;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.stereotype.Service;
import org.vaadin.marcus.data.BookingStatus;
import org.vaadin.marcus.service.BookingDetails;
import org.vaadin.marcus.service.FlightService;


@BrowserCallable
@AnonymousAllowed
@Service
public class BookingService {
    private final FlightService flightService;

    public BookingService(FlightService flightService) {
        this.flightService = flightService;
    }

    public List<BookingDetails> getBookings() {
        return flightService.getBookings();
    }

    //confirm booking
    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        flightService.confirmBooking(bookingNumber, firstName, lastName);
    }

    public List<BookingDetails> getConfirmedBookings() {
        return flightService.getBookings().stream()
                .filter(booking -> booking.bookingStatus().equals( BookingStatus.CONFIRMED))
                .collect(Collectors.toList());
    }
}

================
File: src/main/java/org/vaadin/marcus/client/package-info.java
================
@NonNullApi
package org.vaadin.marcus.client;

import org.springframework.lang.NonNullApi;

================
File: src/main/java/org/vaadin/marcus/data/Booking.java
================
package org.vaadin.marcus.data;

import java.time.LocalDate;

public class Booking {

    private String bookingNumber;
    private LocalDate date;
    private LocalDate bookingTo;
    private Customer customer;
    private String from;
    private String to;
    private BookingStatus bookingStatus;
    private BookingClass bookingClass;

    public Booking(String bookingNumber, LocalDate date, Customer customer, BookingStatus bookingStatus, String from, String to, BookingClass bookingClass) {
        this.bookingNumber = bookingNumber;
        this.date = date;
        this.customer = customer;
        this.bookingStatus = bookingStatus;
        this.from = from;
        this.to = to;
        this.bookingClass = bookingClass;
    }


    public String getBookingNumber() {
        return bookingNumber;
    }

    public void setBookingNumber(String bookingNumber) {
        this.bookingNumber = bookingNumber;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalDate getBookingTo() {
        return bookingTo;
    }

    public void setBookingTo(LocalDate bookingTo) {
        this.bookingTo = bookingTo;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public BookingStatus getBookingStatus() {
        return bookingStatus;
    }

    public void setBookingStatus(BookingStatus bookingStatus) {
        this.bookingStatus = bookingStatus;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public BookingClass getBookingClass() {
        return bookingClass;
    }

    public void setBookingClass(BookingClass bookingClass) {
        this.bookingClass = bookingClass;
    }
}

================
File: src/main/java/org/vaadin/marcus/data/BookingClass.java
================
package org.vaadin.marcus.data;

public enum BookingClass {
    ECONOMY, PREMIUM_ECONOMY, BUSINESS
}

================
File: src/main/java/org/vaadin/marcus/data/BookingData.java
================
package org.vaadin.marcus.data;

import java.util.ArrayList;
import java.util.List;

public class BookingData {

    private List<Customer> customers = new ArrayList<>();
    private List<Booking> bookings = new ArrayList<>();


    public List<Customer> getCustomers() {
        return customers;
    }

    public void setCustomers(List<Customer> customers) {
        this.customers = customers;
    }

    public List<Booking> getBookings() {
        return bookings;
    }

    public void setBookings(List<Booking> bookings) {
        this.bookings = bookings;
    }

    //get available bookings ones with no first and last name
    public List<Booking> getAvailableBookings() {
        return bookings.stream().filter(b -> b.getCustomer().getFirstName() == null && b.getCustomer().getLastName() == null).toList();
    }

    //update booking in db
    public void updateBooking(Booking booking) {
        bookings.set(bookings.indexOf(booking), booking);
    }

   
}

================
File: src/main/java/org/vaadin/marcus/data/BookingStatus.java
================
package org.vaadin.marcus.data;

public enum BookingStatus {
    CONFIRMED, COMPLETED, CANCELLED,AWAITING_CONFIRMATION,AVAILABLE
}

================
File: src/main/java/org/vaadin/marcus/data/Customer.java
================
package org.vaadin.marcus.data;

import java.util.ArrayList;
import java.util.List;

public class Customer {

    private String firstName;
    private String lastName;

    private List<Booking> bookings = new ArrayList<>();

    public Customer() {
    }

    public Customer(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public List<Booking> getBookings() {
        return bookings;
    }

    public void setBookings(List<Booking> bookings) {
        this.bookings = bookings;
    }
}

================
File: src/main/java/org/vaadin/marcus/data/package-info.java
================
@NonNullApi
package org.vaadin.marcus.data;

import org.springframework.lang.NonNullApi;

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jAssistant.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.service.MemoryId;
import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.TokenStream;
import dev.langchain4j.service.UserMessage;
import dev.langchain4j.service.spring.AiService;

@AiService
public interface LangChain4jAssistant {

    @SystemMessage("""
            You are a customer chat support agent of an airline named "Funnair".
            Respond in a friendly, helpful, and joyful manner.
            You are interacting with customers through an online chat system.
            Before providing information about a booking or cancelling a booking,
            you MUST ensure you have the following information from the user:
            booking number, customer first name, and last name.
            Check the message history for this information before asking the user.
            Before changing a booking, you MUST ensure it is permitted by the terms.
            If there is a charge for the change, you MUST ask the user to consent before proceeding.
            Use the provided functions to fetch booking details, change bookings, and cancel bookings.
            Today is {{current_date}}.
            """)
    TokenStream chat(@MemoryId String chatId, @UserMessage String userMessage);
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jConfig.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.data.document.parser.TextDocumentParser;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.memory.chat.ChatMemoryProvider;
import dev.langchain4j.memory.chat.TokenWindowChatMemory;
import dev.langchain4j.model.Tokenizer;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.model.embedding.onnx.allminilml6v2.AllMiniLmL6V2EmbeddingModel;
import dev.langchain4j.rag.content.retriever.ContentRetriever;
import dev.langchain4j.rag.content.retriever.EmbeddingStoreContentRetriever;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;
import dev.langchain4j.store.embedding.inmemory.InMemoryEmbeddingStore;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ResourceLoader;

import static dev.langchain4j.data.document.loader.FileSystemDocumentLoader.loadDocument;
import static dev.langchain4j.data.document.splitter.DocumentSplitters.recursive;

@Configuration
public class LangChain4jConfig {

    @Bean
    EmbeddingModel embeddingModel() {
        return new AllMiniLmL6V2EmbeddingModel();
    }

    @Bean
    EmbeddingStore<TextSegment> embeddingStore() {
        return new InMemoryEmbeddingStore<>();
    }

    // In the real world, ingesting documents would often happen separately, on a CI server or similar
    @Bean
    CommandLineRunner ingestDocsForLangChain(
            EmbeddingModel embeddingModel,
            EmbeddingStore<TextSegment> embeddingStore,
            Tokenizer tokenizer, // Tokenizer is provided by langchain4j-open-ai-spring-boot-starter
            ResourceLoader resourceLoader
    ) {
        return args -> {
            var resource = resourceLoader.getResource("classpath:terms-of-service.txt");
            var termsOfUse = loadDocument(resource.getFile().toPath(), new TextDocumentParser());
            var ingestor = EmbeddingStoreIngestor.builder()
                    .documentSplitter(recursive(50, 0, tokenizer))
                    .embeddingModel(embeddingModel)
                    .embeddingStore(embeddingStore)
                    .build();
            ingestor.ingest(termsOfUse);
        };
    }

    @Bean
    ContentRetriever contentRetriever(
            EmbeddingStore<TextSegment> embeddingStore,
            EmbeddingModel embeddingModel
    ) {
        return EmbeddingStoreContentRetriever.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .maxResults(2)
                .minScore(0.6)
                .build();
    }

    @Bean
    ChatMemoryProvider chatMemoryProvider(Tokenizer tokenizer) {
        // Tokenizer is provided by langchain4j-open-ai-spring-boot-starter
        return chatId -> TokenWindowChatMemory.withMaxTokens(1000, tokenizer);
    }
}

================
File: src/main/java/org/vaadin/marcus/langchain4j/LangChain4jTools.java
================
package org.vaadin.marcus.langchain4j;

import dev.langchain4j.agent.tool.Tool;
import org.springframework.stereotype.Component;
import org.vaadin.marcus.service.BookingDetails;
import org.vaadin.marcus.service.FlightService;

import java.time.LocalDate;
import java.util.List;

@Component
public class LangChain4jTools {

    private final FlightService service;

    public LangChain4jTools(FlightService service) {
        this.service = service;
    }

    @Tool("""
            Retrieves information about an existing booking,
            such as the flight date, booking status, departure and arrival airports, and booking class.
            """)
    public BookingDetails getBookingDetails(String bookingNumber, String firstName, String lastName) {
        return service.getBookingDetails(bookingNumber, firstName, lastName);
    }

    @Tool("""
            Modifies an existing booking.
            This includes making changes to the flight date, and the departure and arrival airports.
            """)
    public void changeBooking(String bookingNumber, String firstName, String lastName,
                              LocalDate newFlightDate, String newDepartureAirport, String newArrivalAirport) {
        service.changeBooking(bookingNumber, firstName, lastName, newFlightDate, newDepartureAirport, newArrivalAirport);
    }

    @Tool("""
            Cancels an existing booking.
            """)
    public void cancelBooking(String bookingNumber, String firstName, String lastName) {
        service.cancelBooking(bookingNumber, firstName, lastName);
    }

    //book a flight
    @Tool("""
        Books a flight. With only booking numer first and last name
        """)
    public void bookFlight(String bookingNumber, String firstName, String lastName) {
        service.updateBooking(bookingNumber, firstName, lastName);
    }

    //get a list of available flights
    @Tool("""
        Retrieves a list of available bookings.
        """)
    public List<BookingDetails> getAvailableBookings() {
        return service.getAvailableBookings();
    }

    // confirm booking
    @Tool("""
        Confirms an existing booking.
        """)
    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        service.confirmBooking(bookingNumber, firstName, lastName);
    }

    //get a list of confirmed bookings
    @Tool("""
        Retrieves a list of confirmed bookings.
        """)
    public List<BookingDetails> getConfirmedBookings() {
        return service.getConfirmedBookings();
    }
}

================
File: src/main/java/org/vaadin/marcus/service/BookingDetails.java
================
package org.vaadin.marcus.service;

import org.vaadin.marcus.data.BookingStatus;

import java.time.LocalDate;

public record BookingDetails(String bookingNumber,
                             String firstName,
                             String lastName,
                             LocalDate date,
                             BookingStatus bookingStatus,
                             String from,
                             String to,
                             String bookingClass) {
}

================
File: src/main/java/org/vaadin/marcus/service/FlightService.java
================
package org.vaadin.marcus.service;

import org.springframework.stereotype.Service;
import org.vaadin.marcus.data.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.HashSet;
import java.util.Set;

@Service
public class FlightService {

    private final BookingData db;
    private Set<String> usedFlightNumbers = new HashSet<>();
    private Random random = new Random();
    private List<String> airlineCodes = List.of("FA", "AA", "VA", "BA", "LH", "UA");

    public FlightService() {
        db = new BookingData();

        initDemoData();
    }

    private void initDemoData() {
        List<String> firstNames = List.of("John", "Jane", "Michael", "Sarah", "Robert");
        List<String> lastNames = List.of("Doe", "Smith", "Johnson", "Williams", "Taylor");
        List<String> airportCodes = List.of("LAX", "SFO", "JFK", "LHR", "CDG", "ARN", "HEL", "TXL", "MUC", "FRA", "MAD", "SJC");
        Random random = new Random();

        var customers = new ArrayList<Customer>();
        var bookings = new ArrayList<Booking>();

        for (int i = 0; i < 5; i++) {
            String firstName = firstNames.get(i);
            String lastName = lastNames.get(i);
            String from = airportCodes.get(random.nextInt(airportCodes.size()));
            String to = airportCodes.get(random.nextInt(airportCodes.size()));
            BookingClass bookingClass = BookingClass.values()[random.nextInt(BookingClass.values().length)];
            Customer customer = new Customer();
            customer.setFirstName(firstName);
            customer.setLastName(lastName);

            LocalDate date = LocalDate.now().plusDays(2*i);

            Booking booking = new Booking(generateUniqueFlightNumber(), date, customer, BookingStatus.AWAITING_CONFIRMATION, from, to, bookingClass);
            customer.getBookings().add(booking);

            customers.add(customer);
            bookings.add(booking);
        }

        //generate some available bookings
        for(int i = 0; i < 30; i++){
            String from = airportCodes.get(random.nextInt(airportCodes.size()));
            String to = airportCodes.get(random.nextInt(airportCodes.size()));
            BookingClass bookingClass = BookingClass.values()[random.nextInt(BookingClass.values().length)];
            Booking booking = new Booking(generateUniqueFlightNumber(), LocalDate.now().plusDays(2*i), new Customer(), BookingStatus.AVAILABLE, from, to, bookingClass);
            bookings.add(booking);
        }

        // Reset the database on each start
        db.setCustomers(customers);
        db.setBookings(bookings);

        System.out.println("Demo data initialized");
    }

    public List<BookingDetails> getBookings() {
        return db.getBookings().stream().map(this::toBookingDetails).toList();
    }

    private Booking findBooking(String bookingNumber, String firstName, String lastName) {
        return db.getBookings().stream()
                .filter(b -> b.getBookingNumber().equalsIgnoreCase(bookingNumber))
                .filter(b -> b.getCustomer().getFirstName().equalsIgnoreCase(firstName))
                .filter(b -> b.getCustomer().getLastName().equalsIgnoreCase(lastName))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));
    }

    public BookingDetails getBookingDetails(String bookingNumber, String firstName, String lastName) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        return toBookingDetails(booking);
    }

    public void changeBooking(String bookingNumber, String firstName, String lastName,
                              LocalDate newFlightDate, String newDepartureAirport, String newArrivalAirport) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        if(booking.getDate().isBefore(LocalDate.now().plusDays(1))){
            throw new IllegalArgumentException("Booking cannot be changed within 24 hours of the start date.");
        }
        booking.setDate(newFlightDate);
        booking.setFrom(newDepartureAirport);
        booking.setTo(newArrivalAirport);
    }

    public void cancelBooking(String bookingNumber, String firstName, String lastName) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        if (booking.getDate().isBefore(LocalDate.now().plusDays(2))) {
            throw new IllegalArgumentException("Booking cannot be cancelled within 48 hours of the start date.");
        }
        booking.setBookingStatus(BookingStatus.AVAILABLE);
    }

    public void updateBooking(String bookingNumber, String firstName, String lastName){
        var booking = getBookingFromFlightNumber(bookingNumber);
        booking.setCustomer(new Customer(firstName, lastName));
        booking.setBookingStatus(BookingStatus.AWAITING_CONFIRMATION);
        db.updateBooking(booking);
    }

    public List<BookingDetails> getAvailableBookings() {
        return db.getAvailableBookings().stream().map(this::toBookingDetails).toList();
    }

    public void confirmBooking(String bookingNumber, String firstName, String lastName) {
        var booking = findBooking(bookingNumber, firstName, lastName);
        booking.setBookingStatus(BookingStatus.CONFIRMED);
        db.updateBooking(booking);
    }

    //get booking froom flight number
    public Booking getBookingFromFlightNumber(String flightNumber){
        return db.getBookings().stream()
                .filter(b -> b.getBookingNumber().equalsIgnoreCase(flightNumber))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));
    }

    private BookingDetails toBookingDetails(Booking booking){
        return new BookingDetails(
                booking.getBookingNumber(),
                booking.getCustomer().getFirstName(),
                booking.getCustomer().getLastName(),
                booking.getDate(),
                booking.getBookingStatus(),
                booking.getFrom(),
                booking.getTo(),
                booking.getBookingClass().toString()
        );
    }

    public String generateUniqueFlightNumber() {
        String flightNumber;
        do {
            flightNumber = generateFlightNumber();
        } while (!usedFlightNumbers.add(flightNumber));
        return flightNumber;
    }

    private String generateFlightNumber() {
        String airline = airlineCodes.get(random.nextInt(airlineCodes.size()));
        int number = random.nextInt(1000, 9999);
        return airline + number;
    }

    //get a list of confirmed bookings
    public List<BookingDetails> getConfirmedBookings() {
        return db.getBookings().stream()
                .filter(b -> b.getBookingStatus() == BookingStatus.CONFIRMED)
                .map(this::toBookingDetails)
                .toList();
    }
}

================
File: src/main/java/org/vaadin/marcus/Application.java
================
package org.vaadin.marcus;

import com.vaadin.flow.component.page.AppShellConfigurator;
import com.vaadin.flow.theme.Theme;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;


@SpringBootApplication
@Theme(value = "customer-support-agent")
public class Application implements AppShellConfigurator {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}

================
File: src/main/resources/banner.txt
================
_                       _    ___ 
     | | __ ___   ____ _     / \  |_ _|
  _  | |/ _` \ \ / / _` |   / _ \  | | 
 | |_| | (_| |\ V / (_| |  / ___ \ | | 
  \___/ \__,_| \_/ \__,_| /_/   \_\___|

================
File: src/main/resources/terms-of-service.txt
================
These Terms of Service govern your experience with Funnair. By booking a flight, you agree to these terms.

1. Booking Flights
- Book via our website or mobile app.
- Full payment required at booking.
- Ensure accuracy of personal information (Name, ID, etc.) as corrections may incur a $25 fee.

2. Changing Bookings
- Changes allowed up to 24 hours before flight.
- Change via online or contact our support.
- Change fee: $50 for Economy, $30 for Premium Economy, Free for Business Class.

3. Cancelling Bookings
- Cancel up to 48 hours before flight.
- Cancellation fees: $75 for Economy, $50 for Premium Economy, $25 for Business Class.
- Refunds processed within 7 business days.

================
File: .gitignore
================
/target/
.gradle
build/
!**/src/main/**/target/
!**/src/test/**/target/
!**/src/main/**/build/
!**/src/test/**/build/

# The following files are automatically generated/updated
node_modules/
frontend/generated/
.npmrc
vite.generated.ts

# Hide application.properties
application.properties
src/main/resources/application.properties

# Eclipse and STS
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

# IntelliJ IDEA
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

# VS Code
.vscode/

# Eclipse store
storage/

src/main/frontend/generated/

# Compiled class file
*.class

# Log files
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

# IntelliJ IDEA
.idea/
*.iws
*.iml
*.ipr

# Eclipse
.classpath
.project
.settings/

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/

# VS Code
.vscode/

# Mac OS
.DS_Store

# Windows
Thumbs.db

# Vaadin specific
node_modules/
frontend/generated/
webpack.generated.js

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Marcus Hellberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /usr/local/etc/mavenrc ] ; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`\\unset -f command; \\command -v java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  $MAVEN_DEBUG_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" \
  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"

================
File: mvnw.cmd
================
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%

================
File: package.json
================
{
  "name": "no-name",
  "license": "UNLICENSED",
  "type": "module",
  "dependencies": {
    "@polymer/polymer": "3.5.1",
    "@vaadin/bundles": "24.4.7",
    "@vaadin/common-frontend": "0.0.19",
    "@vaadin/hilla-file-router": "24.4.7",
    "@vaadin/hilla-frontend": "24.4.7",
    "@vaadin/hilla-lit-form": "24.4.7",
    "@vaadin/hilla-react-auth": "24.4.7",
    "@vaadin/hilla-react-crud": "24.4.7",
    "@vaadin/hilla-react-form": "24.4.7",
    "@vaadin/hilla-react-i18n": "24.4.7",
    "@vaadin/hilla-react-signals": "24.4.7",
    "@vaadin/polymer-legacy-adapter": "24.4.7",
    "@vaadin/react-components": "24.4.7",
    "@vaadin/router": "1.7.5",
    "@vaadin/vaadin-development-mode-detector": "2.0.7",
    "@vaadin/vaadin-lumo-styles": "24.4.7",
    "@vaadin/vaadin-material-styles": "24.4.7",
    "@vaadin/vaadin-themable-mixin": "24.4.7",
    "@vaadin/vaadin-usage-statistics": "2.1.3",
    "construct-style-sheets-polyfill": "3.1.0",
    "date-fns": "2.29.3",
    "lit": "3.1.4",
    "nanoid": "^5.0.6",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-markdown": "^9.0.1",
    "react-router-dom": "6.26.1"
  },
  "devDependencies": {
    "@babel/preset-react": "7.24.7",
    "@rollup/plugin-replace": "5.0.7",
    "@rollup/pluginutils": "5.1.0",
    "@types/react": "18.3.4",
    "@types/react-dom": "18.3.0",
    "@vaadin/hilla-generator-cli": "24.4.7",
    "@vaadin/hilla-generator-core": "24.4.7",
    "@vaadin/hilla-generator-plugin-backbone": "24.4.7",
    "@vaadin/hilla-generator-plugin-barrel": "24.4.7",
    "@vaadin/hilla-generator-plugin-client": "24.4.7",
    "@vaadin/hilla-generator-plugin-model": "24.4.7",
    "@vaadin/hilla-generator-plugin-push": "24.4.7",
    "@vaadin/hilla-generator-plugin-subtypes": "24.4.7",
    "@vaadin/hilla-generator-utils": "24.4.7",
    "@vitejs/plugin-react": "4.3.1",
    "async": "3.2.6",
    "glob": "10.4.5",
    "rollup-plugin-brotli": "3.1.0",
    "rollup-plugin-visualizer": "5.12.0",
    "strip-css-comments": "5.0.0",
    "transform-ast": "2.4.4",
    "typescript": "5.4.5",
    "vite": "5.4.2",
    "vite-plugin-checker": "0.6.4",
    "workbox-build": "7.1.1",
    "workbox-core": "7.1.0",
    "workbox-precaching": "7.1.0"
  },
  "vaadin": {
    "dependencies": {
      "@polymer/polymer": "3.5.1",
      "@vaadin/bundles": "24.4.7",
      "@vaadin/common-frontend": "0.0.19",
      "@vaadin/hilla-file-router": "24.4.7",
      "@vaadin/hilla-frontend": "24.4.7",
      "@vaadin/hilla-lit-form": "24.4.7",
      "@vaadin/hilla-react-auth": "24.4.7",
      "@vaadin/hilla-react-crud": "24.4.7",
      "@vaadin/hilla-react-form": "24.4.7",
      "@vaadin/hilla-react-i18n": "24.4.7",
      "@vaadin/hilla-react-signals": "24.4.7",
      "@vaadin/polymer-legacy-adapter": "24.4.7",
      "@vaadin/react-components": "24.4.7",
      "@vaadin/router": "1.7.5",
      "@vaadin/vaadin-development-mode-detector": "2.0.7",
      "@vaadin/vaadin-lumo-styles": "24.4.7",
      "@vaadin/vaadin-material-styles": "24.4.7",
      "@vaadin/vaadin-themable-mixin": "24.4.7",
      "@vaadin/vaadin-usage-statistics": "2.1.3",
      "construct-style-sheets-polyfill": "3.1.0",
      "date-fns": "2.29.3",
      "lit": "3.1.4",
      "react": "18.3.1",
      "react-dom": "18.3.1",
      "react-router-dom": "6.26.1"
    },
    "devDependencies": {
      "@babel/preset-react": "7.24.7",
      "@rollup/plugin-replace": "5.0.7",
      "@rollup/pluginutils": "5.1.0",
      "@types/react": "18.3.4",
      "@types/react-dom": "18.3.0",
      "@vaadin/hilla-generator-cli": "24.4.7",
      "@vaadin/hilla-generator-core": "24.4.7",
      "@vaadin/hilla-generator-plugin-backbone": "24.4.7",
      "@vaadin/hilla-generator-plugin-barrel": "24.4.7",
      "@vaadin/hilla-generator-plugin-client": "24.4.7",
      "@vaadin/hilla-generator-plugin-model": "24.4.7",
      "@vaadin/hilla-generator-plugin-push": "24.4.7",
      "@vaadin/hilla-generator-plugin-subtypes": "24.4.7",
      "@vaadin/hilla-generator-utils": "24.4.7",
      "@vitejs/plugin-react": "4.3.1",
      "async": "3.2.6",
      "glob": "10.4.5",
      "rollup-plugin-brotli": "3.1.0",
      "rollup-plugin-visualizer": "5.12.0",
      "strip-css-comments": "5.0.0",
      "transform-ast": "2.4.4",
      "typescript": "5.4.5",
      "vite": "5.4.2",
      "vite-plugin-checker": "0.6.4",
      "workbox-build": "7.1.1",
      "workbox-core": "7.1.0",
      "workbox-precaching": "7.1.0"
    },
    "hash": "520c772bcedd34707395adacc2eb9caf1f29f1a638a8578a8bf5b6aa831e9fd7"
  },
  "overrides": {
    "@vaadin/bundles": "$@vaadin/bundles",
    "@vaadin/common-frontend": "$@vaadin/common-frontend",
    "construct-style-sheets-polyfill": "$construct-style-sheets-polyfill",
    "lit": "$lit",
    "@vaadin/router": "$@vaadin/router",
    "@polymer/polymer": "$@polymer/polymer",
    "nanoid": "$nanoid",
    "react-markdown": "$react-markdown",
    "@vaadin/polymer-legacy-adapter": "$@vaadin/polymer-legacy-adapter",
    "@vaadin/vaadin-development-mode-detector": "$@vaadin/vaadin-development-mode-detector",
    "@vaadin/vaadin-usage-statistics": "$@vaadin/vaadin-usage-statistics",
    "@vaadin/react-components": "$@vaadin/react-components",
    "react-dom": "$react-dom",
    "@vaadin/hilla-frontend": "$@vaadin/hilla-frontend",
    "@vaadin/hilla-react-auth": "$@vaadin/hilla-react-auth",
    "react": "$react",
    "@vaadin/hilla-react-crud": "$@vaadin/hilla-react-crud",
    "@vaadin/hilla-file-router": "$@vaadin/hilla-file-router",
    "react-router-dom": "$react-router-dom",
    "@vaadin/hilla-react-i18n": "$@vaadin/hilla-react-i18n",
    "@vaadin/hilla-lit-form": "$@vaadin/hilla-lit-form",
    "@vaadin/hilla-react-form": "$@vaadin/hilla-react-form",
    "@vaadin/hilla-react-signals": "$@vaadin/hilla-react-signals",
    "date-fns": "$date-fns",
    "@vaadin/vaadin-themable-mixin": "$@vaadin/vaadin-themable-mixin",
    "@vaadin/vaadin-lumo-styles": "$@vaadin/vaadin-lumo-styles",
    "@vaadin/vaadin-material-styles": "$@vaadin/vaadin-material-styles"
  }
}

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- Project from https://github.com/marcushellberg/java-ai-playground -->
    <groupId>org.vaadin.marcus</groupId>
    <artifactId>java-ai-playground</artifactId>
    <name>java-ai-playground</name>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>17</java.version>
        <vaadin.version>24.4.11</vaadin.version>
        <langchain4j.version>0.34.0</langchain4j.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
    </parent>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>vaadin-prereleases</id>
            <url>https://maven.vaadin.com/vaadin-prereleases</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>vaadin-prereleases</id>
            <url>https://maven.vaadin.com/vaadin-prereleases</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- LangChain4j dependencies -->
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-spring-boot-starter</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-open-ai-spring-boot-starter</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>
        <dependency>
            <groupId>dev.langchain4j</groupId>
            <artifactId>langchain4j-embeddings-all-minilm-l6-v2</artifactId>
            <version>${langchain4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <defaultGoal>spring-boot:run</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5247</jvmArguments>
                    <wait>500</wait>
                    <maxAttempts>240</maxAttempts>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-frontend</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- Production mode is activated using -Pproduction -->
            <id>production</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.vaadin</groupId>
                        <artifactId>vaadin-maven-plugin</artifactId>
                        <version>${vaadin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>build-frontend</goal>
                                </goals>
                                <phase>compile</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

================
File: README.md
================
# Funnair AI-Powered Customer Support (Enhanced Fork)

![A browser window with a chatbot and a data grid displaying flight booking details](screenshot.jpg)

This app demonstrates an enhanced AI-powered customer support system for Funnair, a fictional airline. It builds upon the original project with additional features and improvements.

## Key Enhancements

- **Booking Status Management**: Added functionality to track and update booking statuses.
- **In-Memory Chat History**: Implemented a system to maintain chat context within a session.
- **Booking Confirmation Flow**: Expanded the AI's ability to guide users through the booking confirmation process.

## Core Features

- Retrieval Augmented Generation (RAG) for accessing terms and conditions
- Tool use (Java methods) for performing actions
- LLM-based user interactions with improved context awareness

## AI Capabilities

- AI-powered chat interface with persistent context
- Enhanced flight booking management system
- Intelligent booking status updates and confirmations

## Tech Stack

- Backend: Spring Boot
- Frontend: [Vaadin Hilla](https://vaadin.com)
- AI Integration: [LangChain4j](https://github.com/langchain4j/langchain4j)

## Requirements

- Java 21+
- OpenAI API key (set in `OPENAI_API_KEY` environment variable)

## Running the Application

1. Clone this forked repository
2. Set the `OPENAI_API_KEY` environment variable
3. Run `Application.java` in your IDE or execute `mvn` in the command line

## Recent Updates

### Enhanced Booking Management

- Added tabbed interface for different booking statuses
- Implemented search functionality for bookings
- Displayed booking status counts for quick overview
- Improved AI tools for more detailed booking information retrieval

### LangChain4j Integration Improvements

- Extended `LangChain4jAssistant` to handle multi-turn conversations
- Updated `LangChain4jTools` with new booking management features
- Added tools for retrieving booking summaries and detailed information

## Next Steps

- Implement more sophisticated booking management workflows
- Enhance error handling and edge case scenarios in the AI interactions
- Develop a more robust memory management system for long-term context retention

## Contributing

Contributions to this enhanced fork are welcome! Please feel free to submit a Pull Request.

## Acknowledgements

This project is a fork of the original demo inspired by the [LangChain4j Customer Support Agent example](https://github.com/langchain4j/langchain4j-examples/tree/main/spring-boot-example/src/main/java/dev/langchain4j/example).

We extend our gratitude to the original creators and contributors:
- The LangChain4j team for the initial implementation
- [@tzolov](https://github.com/tzolov) from the Spring AI team
- [@sohamda](https://github.com/sohamda) from Microsoft for the Semantic Kernel implementation

While we have significantly enhanced and modified the original project, their foundational work was invaluable.

## License

[MIT License](LICENSE)

================
File: tsconfig.json
================
// This TypeScript configuration file is generated by vaadin-maven-plugin.
// This is needed for TypeScript compiler to compile your TypeScript code in the project.
// It is recommended to commit this file to the VCS.
// You might want to change the configurations to fit your preferences
// For more information about the configurations, please refer to http://www.typescriptlang.org/docs/handbook/tsconfig-json.html
{
  "_version": "9.1",
  "compilerOptions": {
    "sourceMap": true,
    "jsx": "react-jsx",
    "inlineSources": true,
    "module": "esNext",
    "target": "es2020",
    "moduleResolution": "bundler",
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "baseUrl": "src/main/frontend",
    "paths": {
      "@vaadin/flow-frontend": ["generated/jar-resources"],
      "@vaadin/flow-frontend/*": ["generated/jar-resources/*"],
      "Frontend/*": ["*"]
    }
  },
  "include": [
    "src/main/frontend/**/*",
    "types.d.ts"
  ],
  "exclude": [
    "src/main/frontend/generated/jar-resources/**"
  ]
}

================
File: types.d.ts
================
declare module '*.module.css' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.sass' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.scss' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.less' {
  declare const classes: Record<string, string>;
  export default classes;
}
declare module '*.module.styl' {
  declare const classes: Record<string, string>;
  export default classes;
}

/* CSS FILES */
declare module '*.css';
declare module '*.sass';
declare module '*.scss';
declare module '*.less';
declare module '*.styl';

/* IMAGES */
declare module '*.svg' {
  const ref: string;
  export default ref;
}
declare module '*.bmp' {
  const ref: string;
  export default ref;
}
declare module '*.gif' {
  const ref: string;
  export default ref;
}
declare module '*.jpg' {
  const ref: string;
  export default ref;
}
declare module '*.jpeg' {
  const ref: string;
  export default ref;
}
declare module '*.png' {
  const ref: string;
  export default ref;
}
declare module '*.avif' {
  const ref: string;
  export default ref;
}
declare module '*.webp' {
  const ref: string;
  export default ref;
}
declare module '*.css?inline' {
  import type { CSSResultGroup } from 'lit';
  const content: CSSResultGroup;
  export default content;
}

declare module 'csstype' {
  interface Properties {
    [index: `--${string}`]: any;
  }
}

================
File: vite.config.ts
================
import { UserConfigFn } from 'vite';
import { overrideVaadinConfig } from './vite.generated';

const customConfig: UserConfigFn = (env) => ({
  // Here you can add custom Vite parameters
  // https://vitejs.dev/config/
});

export default overrideVaadinConfig(customConfig);
